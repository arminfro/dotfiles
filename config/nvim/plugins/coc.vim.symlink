" vi: ft=vim

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \ 'coc-cssmodules',
      \ 'coc-eslint',
      \ 'coc-fzf-preview',
      \ 'coc-git',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-lists',
      \ 'coc-markdownlint',
      \ 'coc-sh',
      \ 'coc-snippets',
      \ 'coc-solargraph',
      \ 'coc-tabnine',
      \ 'coc-tailwindcss',
      \ 'coc-tag',
      \ 'coc-tsserver',
      \ 'coc-ultisnips',
      \ 'coc-vimlsp',
      \ 'coc-webpack',
      \ 'coc-yaml',
      \]
      " \ 'coc-angular',
      " \ 'coc-cspell-dicts',
      " \ 'coc-css',
      " \ 'coc-db',
      " \ 'coc-deno',
      " \ 'coc-dictionary',
      " \ 'coc-docker',
      " \ 'coc-emoji',
      " \ 'coc-explorer',
      " \ 'coc-github',
      " \ 'coc-highlight',
      " \ 'coc-import-cost',
      " \ 'coc-marketplace',
      " \ 'coc-neosnippet',
      " \ 'coc-pairs',
      " \ 'coc-project',
      " \ 'coc-react-refactor',
      " \ 'coc-spell-checker',
      " \ 'coc-sql', " seemed buggy
      " \ 'coc-stylelint', " probs in browser
      " \ 'coc-swagger',
      " \ 'coc-syntax',
      " \ 'coc-texlab',
      " \ 'coc-tslint-plugin', " deprecated
      " \ 'coc-vimtex',
      " \ 'coc-word',
      " \ 'coc-xml',
      " \ 'coc-yank',

" Better display for messages
" give more space to outputs of executed commands to 2 lines
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=100
" don't give |ins-completion-menu| messages.
" make vim errors shorter
set shortmess+=c

" Use <C-j> for both expand and jump (make expand higher priority.)
" https://github.com/neoclide/coc-snippets/issues/173
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use `[j` and `]j` to navigate diagnostics
nmap <silent> [j <Plug>(coc-diagnostic-prev)
nmap <silent> ]j <Plug>(coc-diagnostic-next)

" navigate chunks of current buffer (coc-git)
nmap [h <Plug>(coc-git-prevchunk)
nmap ]h <Plug>(coc-git-nextchunk)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <F2> <Plug>(coc-rename)

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Use <space-s> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <space>s <Plug>(coc-range-select)
xmap <silent> <space>s <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OI` for organize import of current buffer
command! -nargs=0 OI   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" coc-yank
" nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
