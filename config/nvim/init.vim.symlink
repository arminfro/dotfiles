" vi: ft=vim

" Buffer delete on ,x
" nnoremap <leader>x :bp<cr>:bd #<cr>

" vnoremap <leader>l  :e ~/.config/nvim/init.vim<cr>

" closes all buffers except focused one
" nnoremap <leader>X '%bd|e#|bd#'<CR>

" no need for ex mode
" nnoremap Q <nop>
" nmap <CR> <nop>

" :termial
" maps leader esc to command mode
" :tnoremap <leader><Esc> <C-\><C-n>

" opens folds with space
" nnoremap <Space> za
" vnoremap <Space> za

" Some vim features on leader
" noremap <Leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
" noremap <Leader>s :split <C-R>=expand("%:p:h") . '/'<CR>
" noremap <Leader>v :vnew <C-R>=expand("%:p:h") . '/'<CR>

" ## Persistant Undo
let vimDir = '$HOME/.config/nvim'
" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
  let myUndoDir = expand(vimDir . '/undodir')
  " Create dirs
  call system('mkdir ' . vimDir)
  call system('mkdir ' . myUndoDir)
  let &undodir = myUndoDir
  set undofile
endif

" Do we have local vimrc?
if filereadable('.vimrc.local')
  " If so, go ahead and load it.
  source .vimrc.local
endif

call plug#begin()
  "// Interface - colors
  Plug 'nekonako/xresources-nvim', " uses Xresources for colorscheme ?
  " Plug 'edluffy/specs.nvim', { 'branch': 'main' } " cursor visualization

  " Plug 'tpope/vim-obsession' " vim session management

  "// Common Tooling
  " Plug 'neovim/pynvim' " python neovim client
  " Plug 'brooth/far.vim' " Find And Replace Vim plugin
  Plug 'wellle/visual-split.vim' " split to new window by visualizing text
  " Plug 'AndrewRadev/splitjoin.vim' " splits or joins code lines
	" Plug 'vim-scripts/loremipsum' " random text generator
	" Plug 'vim-scripts/Align' " align text

 "// Ruby & Co
  " Plug 'tpope/vim-rails', { 'for': ['ruby', 'eruby']}
  " Plug 'vim-ruby/vim-ruby', { 'for': ['ruby', 'eruby']}
  " Plug 'tpope/vim-endwise' " helper to end structure's like `if ...  end`

  "// Document Tools

  " Plug 'conornewton/vim-pandoc-markdown-preview' " markdown instead preview
  " Plug 'skywind3000/asyncrun.vim' " dependency
  " let g:md_pdf_viewer="zathura"
  " let g:md_args = "--lua-filter=diagram-generator/diagram-generator.lua"

  " Plug 'vim-pandoc/vim-pandoc-syntax'
  " Plug 'vim-latex/vim-latex'
  " Plug 'vim-pandoc/vim-pandoc'
  " let g:pandoc#spell#enabled = 0
  " Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
  " let g:instant_markdown_autostart = 0
  " " let g:instant_markdown_slow = 1
  " let g:instant_markdown_browser = "firefox --new-window"

  for f in split(glob('~/.config/nvim/plugins/*.vim'), '\n')
    exe 'source' f
  endfor

  " Documentation generator
  " Plug 'kkoomen/vim-doge'
  " let g:doge_mapping_comment_jump_forward = 'C-j'

  " Neovim Terminal
  " Plug 'brettanomyces/nvim-terminus'
  " Plug 'glacambre/shelley' " better neovim support for zsh terminal

  " Opens fold automatically if cursor is placed on line, see https://stackoverflow.com/a/7035949/6115544
  " nnoremap <silent> j :<c-u>call MoveUpDown('j', +1, 1)<cr>
  " nnoremap <silent> k :<c-u>call MoveUpDown('k', -1, 1)<cr>
  " nnoremap <silent> gj :<c-u>call MoveUpDown('gj', +1, 1)<cr>
  " nnoremap <silent> gk :<c-u>call MoveUpDown('gk', -1, 1)<cr>
  " nnoremap <silent> <c-d> :<c-u>call MoveUpDown("\<lt>c-d>", +1, '&l:scroll')<cr>
  " nnoremap <silent> <c-u> :<c-u>call MoveUpDown("\<lt>c-u>", -1, '&l:scroll')<cr>
  " nnoremap <silent> <c-f> :<c-u>call MoveUpDown("\<lt>c-f>", +1, 'winheight("%")')<cr>
  " nnoremap <silent> <c-b> :<c-u>call MoveUpDown("\<lt>c-b>", -1, 'winheight("%")')<cr>
  " function! MoveUpDown(cmd, dir, ndef)
    " let n = v:count == 0 ? eval(a:ndef) : v:count
    " let l = line('.') + a:dir * n
    " silent! execute l . 'foldopen!'
    " execute 'norm! ' . n . a:cmd
  " endfunction

  " # Auto commands #
  " on events, command mode in neovim terminal
  " au FocusLost,TabLeave * call feedkeys("\<C-\>\<C-n>")
  " tnoremap <Esc> <C-\><C-n>

  " Plug 'svermeulen/vim-subversive' " easier substitution with new operators
  " nmap s <plug>(SubversiveSubstitute)
  " nmap ss <plug>(SubversiveSubstituteLine)
  " nmap S <plug>(SubversiveSubstituteToEndOfLine)

call plug#end()

:command! CopyFilepath let @+ = expand('%:p')

" correct comment highlighting for json
" autocmd FileType json syntax match Comment +\/\/.\+$+

" Workaround <Paste> Issue, https://github.com/neovim/neovim/issues/7994#issuecomment-388296360
au InsertLeave * set nopaste

" colorscheme xresources
colorscheme zephyr

hi Visual guibg=#373b41
hi Comment guifg=#969896
hi LineNr guifg=#969896

" fixes background color
hi Normal guibg=030405 ctermbg=030405
hi LineNr guibg=030405 ctermbg=030405
hi SignColumn guibg=030405 ctermbg=030405
hi EndOfBuffer guibg=030405 ctermbg=030405

" " overwrite color for 'kevinhwang91/nvim-hlslens'
" hi link HlSearchLens LineNr

