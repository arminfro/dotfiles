-- vi: ft=lua

function _G.copy(obj, seen)
  if type(obj) ~= "table" then
    return obj
  end
  if seen and seen[obj] then
    return seen[obj]
  end
  local s = seen or {}
  local res = {}
  s[obj] = res
  for k, v in next, obj do
    res[copy(k, s)] = copy(v, s)
  end
  return setmetatable(res, getmetatable(obj))
end

function _G.truncating_label(label, max_width)
  local ELLIPSIS_CHAR = "â€¦"
  local truncated_label = vim.fn.strcharpart(label, 0, max_width)
  if truncated_label ~= label then
    return truncated_label .. ELLIPSIS_CHAR
  else
    return label
  end
end

-- print tables
function _G.P(...)
  local objects = vim.tbl_map(vim.inspect, { ... })
  print(unpack(objects))
end

-- expressive if
function _G.if_exp(bool, a, b)
  if bool then
    return a
  else
    return b
  end
end

function _G.packer_print()
  local file = assert(io.open(vim.env["HOME"] .. "/packer_plugins.md", "w"))
  print_table_to_file(require("urlview.search").packer(), file)
  file:close()
end

function _G.print_table_to_file(t, fd)
  fd = fd or io.stdout
  local function print(str)
    str = str or ""
    fd:write(str .. "\n")
  end

  local print_r_cache = {}
  local function sub_print_r(t, indent)
    if print_r_cache[tostring(t)] then
      print(indent .. "*" .. tostring(t))
    else
      print_r_cache[tostring(t)] = true
      if type(t) == "table" then
        for pos, val in pairs(t) do
          if type(val) == "table" then
            print(indent .. "[" .. pos .. "] => " .. tostring(t) .. " {")
            sub_print_r(val, indent .. string.rep(" ", string.len(pos) + 8))
            print(indent .. string.rep(" ", string.len(pos) + 6) .. "}")
          elseif type(val) == "string" then
            print(indent .. "[" .. pos .. "] => \"" .. val .. "\"")
          else
            print(indent .. "[" .. pos .. "] => " .. tostring(val))
          end
        end
      else
        print(indent .. tostring(t))
      end
    end
  end

  if type(t) == "table" then
    print(tostring(t) .. " {")
    sub_print_r(t, "  ")
    print("}")
  else
    sub_print_r(t, "  ")
  end
  print()
end

function os.capture(cmd, raw)
  local f = assert(io.popen(cmd, "r"))
  local s = assert(f:read("*a"))
  f:close()
  if raw then
    return s
  end
  s = string.gsub(s, "^%s+", "")
  s = string.gsub(s, "%s+$", "")
  s = string.gsub(s, "[\n\r]+", " ")
  return s
end

return {}
