-- vi: ft=lua

local M = {}

local g = vim.g

function M.bootstrap()
  local fn = vim.fn
  local install_path = fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"
  ---@diagnostic disable-next-line: missing-parameter
  if fn.empty(fn.glob(install_path)) > 0 then
    PACKER_BOOTSTRAP = fn.system({
      "git",
      "clone",
      "--depth",
      "1",
      "https://github.com/wbthomason/packer.nvim",
      install_path,
    })
    print("Cloning packer...")
    vim.cmd([[packadd packer.nvim]])
  end
end

function M.disable_builtins()
  local default_plugins = {
    "2html_plugin",
    "getscript",
    "getscriptPlugin",
    "gzip",
    "logipat",
    "netrw",
    "netrwPlugin",
    "netrwSettings",
    "netrwFileHandlers",
    "matchit",
    "tar",
    "tarPlugin",
    "rrhelper",
    "remote_plugin",
    "spellfile_plugin",
    "vimball",
    "vimballPlugin",
    "zip",
    "zipPlugin",
  }

  g.zipPlugin = false
  for _, plugin in pairs(default_plugins) do
    g["loaded_" .. plugin] = 1
  end
end

function M.impatient()
  local impatient_ok, _ = pcall(require, "impatient")
  if impatient_ok then
    require("impatient").enable_profile()
  end
end

function M.open_and_restore_focus(callback)
  local winnr = vim.api.nvim_get_current_win()
  callback()
  vim.api.nvim_set_current_win(winnr)
end

function M.open_and_restore_focus_cb(callback)
  return function()
    M.open_and_restore_focus(callback)
  end
end

return M
