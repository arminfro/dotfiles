-- vi: ft=lua

local M = {}

local g = vim.g

function M.bootstrap()
	local fn = vim.fn
	local install_path = fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"
	if fn.empty(fn.glob(install_path)) > 0 then
		PACKER_BOOTSTRAP = fn.system({
			"git",
			"clone",
			"--depth",
			"1",
			"https://github.com/wbthomason/packer.nvim",
			install_path,
		})
		print("Cloning packer...")
		vim.cmd([[packadd packer.nvim]])
	end
end

function M.disable_builtins()
	g.loaded_gzip = false
	g.loaded_netrwPlugin = false
	g.loaded_netrwSettngs = false
	g.loaded_netrwFileHandlers = false
	g.loaded_tar = false
	g.loaded_tarPlugin = false
	g.zipPlugin = false
	g.loaded_zipPlugin = false
	g.loaded_2html_plugin = false
	g.loaded_remote_plugins = false
end

function M.impatient()
	local impatient_ok, _ = pcall(require, "impatient")
	if impatient_ok then
		require("impatient").enable_profile()
	end
end

function _G.copy(obj, seen)
    if type(obj) ~= "table" then
        return obj
    end
    if seen and seen[obj] then
        return seen[obj]
    end
    local s = seen or {}
    local res = {}
    s[obj] = res
    for k, v in next, obj do
        res[copy(k, s)] = copy(v, s)
    end
    return setmetatable(res, getmetatable(obj))
end

-- print tables
function _G.P(...)
    local objects = vim.tbl_map(vim.inspect, { ... })
    print(unpack(objects))
end

return M
