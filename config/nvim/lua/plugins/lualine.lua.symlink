-- vi: ft=lua

return {
	-- wait for issue resolving: roobert statusline-action-hints.nvim issues 3
	-- {
	--   "roobert/statusline-action-hints.nvim",
	--   config = function()
	--     require("statusline-action-hints").setup({
	--       definition_identifier = "gd",
	--       template = "%s ref:%s",
	--     })
	--   end,
	-- },
	"nvim-lualine/lualine.nvim",
	event = "VeryLazy",
	dependencies = {
		-- wait for issue resolving: roobert statusline-action-hints.nvim issues 3
		-- {
		--   "roobert/statusline-action-hints.nvim",
		--   config = function()
		--     require("statusline-action-hints").setup({
		--       definition_identifier = "gd",
		--       template = "%s ref:%s",
		--     })
		--   end,
		-- },
		{
			-- Show commit info at current line on cursorhold
			"f-person/git-blame.nvim",
			config = function()
				vim.g.gitblame_display_virtual_text = 0
				vim.g.gitblame_date_format = "%r"
				vim.g.gitblame_highlight_group = "Question"
				vim.g.gitblame_message_template = "<date> • <summary>"
			end,
		},
		"Isrothy/lualine-diagnostic-message",
		"nvim-tree/nvim-web-devicons",
		"meuter/lualine-so-fancy.nvim",
		"sherlock5512/lualine-spell-status",
		"chrisgrieser/nvim-dr-lsp",
	},
	opts = function()
		local icons = require("lazyvim.config").icons
		local diagnosticsIcons = {
			error = icons.diagnostics.Error,
			warn = icons.diagnostics.Warn,
			info = icons.diagnostics.Info,
			hint = icons.diagnostics.Hint,
		}

		local function fg(name)
			return function()
				---@type {foreground?:number}?
				local hl = vim.api.nvim_get_hl_by_name(name, true)
				return hl and hl.foreground and { fg = string.format("#%06x", hl.foreground) }
			end
		end

		return {
			options = {
				theme = "auto",
				globalstatus = true,
				disabled_filetypes = { statusline = { "dashboard", "lazy", "alpha", "undotree" } },
			},
			extensions = {
				"aerial",
				"fugitive",
				"lazy",
				"mason",
				"nvim-dap-ui",
				"nvim-tree",
				"overseer",
				"quickfix",
				"symbols-outline",
				"toggleterm",
				"trouble",
			},
			sections = {
				lualine_a = { "fancy_mode" },
				lualine_b = {
					{
						"diagnostics",
						symbols = diagnosticsIcons,
					},
					{ "filetype", icon_only = true, separator = "", padding = { left = 1, right = 0 } },
          -- due to barbecue, not needed anymore
          -- { "filename", path = 1, symbols = { modified = "  ", readonly = "", unnamed = "" } },
          -- stylua: ignore
          {'spell_status'},
					-- { require("dr-lsp").lspCount, color = fg("Special") },
					-- { require("dr-lsp").lspProgress, color = fg("Special") },
				},
				lualine_c = {
					{
						"fancy_branch",
						fmt = function(str)
							return str:sub(1, 16)
						end,
					},
					{
						function()
							if not pcall(require, "lsp_signature") then
								return
							end
							local sig = require("lsp_signature").status_line(128)
							if #sig.label > 0 then
								return sig.label
							end
						end,
						cond = function()
							return package.loaded["lsp_signature"]
								and #(require("lsp_signature").status_line(128)).label > 0
						end,
					},
					{ "diagnostic-message", icons = diagnosticsIcons },
					{ require("dr-lsp").lspCount, color = fg("Special") },
					{ require("dr-lsp").lspProgress, color = fg("Special") },
				},
				-- lualine_b = {
				--   function ()
				--    "fancy_branch"
				--   end
				-- },
				lualine_x = {
					{
						require("gitblame").get_current_blame_text,
						color = fg("Statement"),
					},
					{ "aerial" },
					{ "fugitive" },
					{ "lazy" },
					{ "mason" },
					{ "nvim-dap-ui" },
					{ "nvim-tree" },
					{ "overseer" },
					{ "quickfix" },
					{ "symbols-outline" },
					{ "toggleterm" },
					{ "trouble" },
					{ "fancy_macro" },
					{ "fancy_searchcount" },
          -- stylua: ignore
          {
            function() return require("noice").api.status.command.get() end,
            cond = function() return package.loaded["noice"] and require("noice").api.status.command.has() end,
            color = fg("Statement")
          },
          -- stylua: ignore
          {
            function() return require("noice").api.status.mode.get() end,
            cond = function() return package.loaded["noice"] and require("noice").api.status.mode.has() end,
            color = fg("Constant") ,
          },
					{
						require("lazy.status").updates,
						cond = require("lazy.status").has_updates,
						color = fg("Special"),
					},
					{
						"fancy_diff",
						symbols = icons.git,
					},
				},
				lualine_y = {
					{ "progress", separator = " ", padding = { left = 1, right = 0 } },
					{ "location", padding = { left = 0, right = 1 } },
					{
						function()
							local current_line = vim.fn.line(".")
							local total_lines = vim.fn.line("$")
							local chars =
								{ "__", "▁▁", "▂▂", "▃▃", "▄▄", "▅▅", "▆▆", "▇▇", "██" }
							local line_ratio = current_line / total_lines
							local index = math.ceil(line_ratio * #chars)
							return chars[index]
						end,
						padding = { left = 0, right = 1 },
					},
				},
				lualine_z = {
					function()
						return " " .. os.date("%R")
					end,
				},
			},
		}
	end,
}
