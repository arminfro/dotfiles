-- vi: ft=lua

local M = {}

local augroup = vim.api.nvim_create_augroup("LspFormatting", {})

function M.config()
  -- Formatting and linting
  local status_ok, null_ls = pcall(require, "null-ls")
  if not status_ok then
    return
  end

  -- Check supported formatters
  -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/formatting

  -- Check supported linters
  -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics

  -- syntax to adapt builtin config
  -- null_ls.builtins.formatting.rustfmt.with({
  --   extra_args = { "--edition=2021" }
  -- })

  -- local c = null_ls.builtins.completion
  local d = null_ls.builtins.diagnostics
  local f = null_ls.builtins.formatting

  null_ls.setup({
    debug = false,
    sources = {
      d.rubocop,
      d.shellcheck,
      d.zsh,
      f.black,
      f.rubocop,
      f.rustfmt,
      f.prettier,
      f.stylua,
    },

    -- sets format on save
    -- temporarily disabled, see https://github.com/jose-elias-alvarez/null-ls.nvim/issues/778
    on_attach = function(client, bufnr)
      print("hello from on_attach")
      -- set_format_on_save
      if client.supports_method("textDocument/formatting") then
        vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
        vim.api.nvim_create_autocmd({ "BufWritePre" }, {
          group = augroup,
          buffer = bufnr,
          callback = function()
            vim.lsp.buf.format({
              filter = function(clients)
                -- filter out clients that you don't want to use
                return vim.tbl_filter(function(client)
                  return client.name ~= "solargraph"
                end, clients)
              end,
            })
          end,
        })
      end
    end,
  })
end

return M
