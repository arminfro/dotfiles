-- vi: ft=lua

local M = {}

function M.config()
  local status_ok, treesitter = pcall(require, "nvim-treesitter.configs")
  if not status_ok then
    return
  end

  treesitter.setup {
    -- todo, set list
    ensure_installed = {
      'bash', 'css', 'dockerfile', 'dot', 'graphql',
      'hjson', 'html', 'http', 'javascript', 'jsdoc',
      'json', 'json5', 'latex', 'lua', 'norg', 'python',
      'regex', 'ruby', 'rust', 'scss', 'tsx', 'typescript',
      'vim', 'yaml'
    },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "gnn",
        scope_incremental = "grn",
        node_incremental = "grc",
        node_decremental = "grm",
      },
    },
    context_commentstring = {
      enable = true,
      config = {
        javascript = {
          __default = '// %s',
          jsx_element = '{/* %s */}',
          jsx_fragment = '{/* %s */}',
          jsx_attribute = '// %s',
          comment = '// %s'
        }
      }
    },
    indent = { enable = true },
    matchup = { enable = true },
    autotag = {
      enable = true,
    },
    autopairs = { enable = true },
    rainbow = {
      enable = true,
      extended_mode = true, -- Highlight also non-parentheses delimiters
      max_file_lines = 1000,
    },
    -- refactor = {
    --   smart_rename = { enable = true, keymaps = { smart_rename = "grr" } },
    --   highlight_definitions = { enable = true },
    --   navigation = {
    --     enable = true,
    --     keymaps = {
    --       goto_definition_lsp_fallback = "gnd",
    --       -- use telescope for these lists
    --       -- list_definitions = "gnD",
    --       -- list_definitions_toc = "gO",
    --       -- @TODOUA: figure out if I need both below
    --       goto_next_usage = "<a-*>", -- is this redundant?
    --       goto_previous_usage = "<a-#>", -- also this one?
    --     },
    --   },
    --   -- highlight_current_scope = {enable = true}
    -- },
    textobjects = {
      lsp_interop = {
        enable = true,
        border = "none",
        peek_definition_code = {
          ["df"] = "@function.outer",
          ["dF"] = "@class.outer",
        },
      },
      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          ["]m"] = "@function.outer",
          ["]]"] = "@call.outer",
        },
        goto_next_end = {
          ["]M"] = "@function.outer",
          ["]["] = "@call.outer",
        },
        goto_previous_start = {
          ["[m"] = "@function.outer",
          ["[["] = "@call.outer",
        },
        goto_previous_end = {
          ["[M"] = "@function.outer",
          ["[]"] = "@call.outer",
        },
      },
      select = {
        enable = true,
        lookahead = true,
        keymaps = {
          ["af"] = "@function.outer",
          ["if"] = "@function.inner",
          ["ac"] = "@call.outer",
          ["ic"] = "@call.inner",
        },
      },
      swap = {
        enable = true,
        swap_next = {
          [",a"] = "@parameter.inner",
        },
        swap_previous = {
          [",A"] = "@parameter.inner",
        },
      },
    },
  }
end

return M
