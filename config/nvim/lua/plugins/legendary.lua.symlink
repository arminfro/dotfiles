-- vi: ft=lua

-- there are some more keybindings in plugins.gitsigns, plugins.cmp, plugins.treesitter, plugins.symbols-outline
local M = {}

local opts = { noremap = true }

local open_and_restore_focus_cb = require("core.utils").open_and_restore_focus_cb

function M.toggleterm()
  local terminals = require("plugins.toggleterm").terminals()
  require("legendary").bind_keymaps({
    { "<leader>th", terminals.htop, description = "Open Htop", mode = { "n", "v" }, opts },
    { "<leader>tn", terminals.node, description = "Open Node repl", mode = { "n", "v" }, opts },
    { "<leader>tt", terminals.ts_node, description = "Open TS-Node repl", mode = { "n", "v" }, opts },
    { "<leader>tr", terminals.ruby, description = "Open Ruby irb repl", mode = { "n", "v" }, opts },
    { "<leader>tl", terminals.lua, description = "Open Lua repl", mode = { "n", "v" }, opts },
    { "<leader>tp", terminals.lua, description = "Open Python repl", mode = { "n", "v" }, opts },
  })
end

function M.which_key()
  require("legendary").bind_keymaps({
    { "<leader>k", ":WhichKey ''<CR>", description = "Open WhichKey", mode = { "n", "v" }, opts },
  })
end

function M.lazygit()
  require("legendary").bind_keymaps({
    { "<leader>gl", ":LazyGit<CR>", description = "Open LazyGit", mode = { "n", "v" }, opts },
  })
end

function M.git_messenger()
  require("legendary").bind_keymaps({
    {
      "<leader>gm",
      ":GitMessenger<CR>",
      mode = { "n" },
      description = "Git commit message in floating window",
      opts,
    },
  })
end

function M.gitlinker()
  require("legendary").bind_keymaps({
    -- leader gy is actual keymapping, just let it be set by plugin, works better
    -- {
    --   "<leader>gy",
    --   ":lua require'gitlinker'.get_buf_range_url()<CR>",
    --   description = "Copy Git Link",
    --   mode = { "n", "v" },
    --   opts,
    -- },
    {
      "<leader>gY",
      ":lua require'gitlinker'.get_repo_url()<CR>",
      description = "Copy Repo Url",
      mode = { "n", "v" },
      opts,
    },
    {
      "<leader>gB",
      ":lua require'gitlinker'.get_repo_url({action_callback = require'gitlinker.actions'.open_in_browser})<CR>",
      description = "Open Repo in Browser",
      mode = { "n", "v" },
      opts,
    },
  })
end

function M.fugitive()
  require("legendary").bind_commands({
    { ":GitResetHard", ":G reset --hard", description = "Reset Git hard" },
  })
  require("legendary").bind_keymaps({
    { "<leader>gs", ":Git<CR>", mode = { "n" }, description = "Git status", opts },
    { "<leader>gc", ":Git commit<CR>", mode = { "n" }, description = "Git commit", opts },
    -- { "<leader>gd", ":Gdiffsplit<CR>", mode = { "n" }, description = "Git diff", opts },
    -- {'<leader>gb', ':GV<CR>', mode = {"n"}, description = "Git commits of current file", opts },
    { "<leader>grhh", ":GitResetHard<CR>", mode = { "n" }, opts },
  })
end

function M.diffview()
  require("legendary").bind_keymaps({
    { "<leader>gd", ":DiffviewOpen<CR>", description = "Open Diffview for project", mode = { "n" }, opts },
    -- { "<leader>dc", ":DiffviewClose<CR>", description = "Close Diffview", mode = { "n", "v" }, opts },
  })
end

function M.refactoring()
  require("legendary").bind_keymaps({
    {
      "<leader>re",
      ":lua require('refactoring').refactor('Extract Function')<CR>",
      description = "Refactoring, extract function",
      mode = { "n", "v" },
      opts,
    },
    {
      "<leader>rf",
      ":lua require('refactoring').refactor('Extract Function To File')<CR>",
      description = "Refactoring, extract function to separate file",
      mode = { "n", "v" },
      opts,
    },
    {
      "<leader>rv",
      ":lua require('refactoring').refactor('Extract Variable')<CR>",
      description = "Refactoring, extract variable",
      mode = { "n", "v" },
      opts,
    },
    {
      "<leader>ri",
      ":lua require('refactoring').refactor('Inline Variable')<CR>",
      description = "Refactoring, inline variable",
      mode = { "n", "v" },
      opts,
    },
  })
end

function M.auto_pandoc()
  require("legendary").bind_commands({
    { ":PandocMdConvert", "lua require('auto-pandoc').run_pandoc()", description = "Convert Md to Pdf" },
  })
  require("legendary").bind_keymaps({
    { "<leader>pc", ":PandocMdConvert<CR>", description = "Convert Md to Pdf", mode = { "n", "v" }, opts },
    --     {'<leader>ne',':SettleEdit<CR>', description = "Edit a note", mode = {"n", "v"}, opts},
  })
end

function M.yode()
  require("legendary").bind_keymaps({
    {
      "<leader>f",
      ":YodeCreateSeditorFloating<CR>",
      description = "focus on a code part and make it floating",
      mode = { "v" },
      opts,
    },
  })
end

function M.startify()
  require("legendary").bind_keymaps({
    { "<F1>", ":Startify<CR>", description = "Open Startify", mode = { "n" }, opts },
  })
end

function M.symbols_outline()
  require("legendary").bind_keymaps({
    { "<F9>", ":SymbolsOutline<CR>", description = "Toggle Symbols Outline", mode = { "n" }, opts },
  })
end

function M.bufferline()
  require("legendary").bind_keymaps({
    { "<C-L>", ":BufferLineCycleNext<CR>", description = "Go to next buffer", mode = { "n" }, opts },
    { "<C-H>", ":BufferLineCyclePrev<CR>", description = "Go to prev buffer", mode = { "n" }, opts },
    { "[b", ":BufferLineMovePrev<CR>", description = "Move buffer to the right", mode = { "n" }, opts },
    { "]b", ":BufferLineMoveNext<CR>", description = "Move buffer to the left", mode = { "n" }, opts },
    { "<leader>bp", ":BufferLinePick<CR>", description = "Pick a buffer", mode = { "n" }, opts },
    {
      "<leader>bse",
      ":BufferLineSortByExtension<CR>",
      description = "Sort Buffers by Extension",
      mode = { "n" },
      opts,
    },
    {
      "<leader>bsd",
      ":BufferLineSortByDirectory<CR>",
      description = "Sort Buffers by Directory",
      mode = { "n" },
      opts,
    },
  })
end

function M.nvim_window()
  require("legendary").bind_keymaps({
    {
      "<leader>ww",
      require("nvim-window").pick,
      description = "Pick window to focus, nvim-window",
      mode = { "n" },
      opts,
    },
  })
end

function M.trouble()
  require("legendary").bind_keymaps({
    {
      "<F8>",
      open_and_restore_focus_cb(function()
        vim.cmd("TroubleToggle")
      end),
      description = "Trouble: Workspace diagnostics in quickfix window",
      mode = { "n" },
      opts,
    },
  })
end

function M.lsp(bufnr)
  opts = { buffer = bufnr, noremap = true }
  local legendary = require("legendary")
  legendary.bind_commands({
    { ":Format", "lua vim.lsp.buf.format()", description = "Format current buffer" },
  })
  legendary.bind_keymaps({
    {
      "<space>d",
      "<cmd>lua vim.lsp.buf.definition()<CR>",
      description = "LSP, Go to definition",
      mode = { "n" },
      opts,
    },
    {
      "<space>D",
      "<cmd>lua vim.lsp.buf.declaration()<CR>",
      description = "LSP, Go to declaration",
      mode = { "n" },
      opts,
    },
    {
      "<space>i",
      "<cmd>lua vim.lsp.buf.implementation()<CR>",
      description = "LSP, Go to implementation",
      mode = { "n" },
      opts,
    },
    -- {
    --   "<space>t",
    --   "<cmd>lua vim.lsp.buf.type_definition()<CR>",
    --   description = "LSP, Go to type definition",
    --   mode = { "n" },
    --   opts,
    -- },
    {
      "<space>t",
      ":FzfLua lsp_live_workspace_symbols<CR>",
      description = "LSP, Search workspace for Symbols",
      mode = { "n" },
      opts,
    },
    { "<space>f", ":Format<CR>", description = "LSP, Format document", mode = { "n" }, opts },
  })
end

function M.typescript_lsp()
  require("legendary").bind_keymaps({
    { "<space>ti", ":TypescriptAddMissingImports<CR>", description = "TS import all", mode = { "n" }, opts },
    {
      "<space>to",
      ":TypescriptOrganizeImports<CR>",
      description = "TS remove unused imports",
      mode = { "n" },
      opts,
    },
    { "<space>tr", ":TypescriptRenameFile<CR>", description = "TS Rename File", mode = { "n" }, opts },
  })
end

function M.lspsaga()
  require("legendary").bind_keymaps({
    {
      "<space>h",
      ":Lspsaga hover_doc<CR>",
      description = "LSP, Show hover of current symbol",
      mode = { "n" },
      opts,
    },
    { "<space>a", ":Lspsaga code_action<CR>", description = "LSP, Code Actions by Lsp", mode = { "n" }, opts },
    {
      "<space>a",
      ":Lspsaga range_code_action<CR>",
      description = "LSP, Code Actions by Lsp per selection",
      mode = { "v" },
      opts,
    },
    {
      "<space>s",
      ":Lspsaga signature_help<CR>",
      description = "LSP, Signature help by Lsp",
      mode = { "n" },
      opts,
    },
    { "<space>rn", ":Lspsaga rename<CR>", description = "LSP, Rename current symbol", mode = { "n" }, opts },
    {
      "[j",
      ":Lspsaga diagnostic_jump_prev<CR>",
      description = "LSP, Go to previous diagnostic",
      mode = { "n" },
      opts,
    },
    {
      "]j",
      ":Lspsaga diagnostic_jump_next<CR>",
      description = "LSP, Go to next diagnostic",
      mode = { "n" },
      opts,
    },
  })
end

function M.nvim_tree()
  require("legendary").bind_keymaps({
    {
      "<F7>",
      open_and_restore_focus_cb(function()
        vim.cmd("NvimTreeToggle")
      end),
      description = "toggle NvimTree",
      mode = { "n" },
      opts,
    },
    {
      "<leader>f",
      ":NvimTreeFindFile<CR>",
      mode = { "n" },
      description = "Find current file in nvim-tree",
      opts,
    },
  })
end

function M.http_rest()
  require("legendary").bind_keymaps({
    {
      "<leader>ar",
      "<Plug>RestNvim",
      mode = { "n", "v" },
      description = "run the http request under the cursor",
      opts,
    },
    {
      "<leader>ap",
      "<Plug>RestNvimPreview",
      mode = { "n", "v" },
      description = "preview http request curl command under the cursor",
      opts,
    },
    { "<leader>al", "<Plug>RestNvimLast", mode = { "n", "v" }, description = "re-run last http request", opts },
  })
end

function M.fzf()
  require("legendary").bind_keymaps({
    { "<F2>", "<ESC>:FzfLua<CR>", mode = { "n", "v" }, description = "Fuzzy searches", opts },
    { "<F12>", "<ESC>:FzfLua help_tags<CR>", mode = { "n" }, description = "Fuzzy search helptags", opts },
    { "<C-O>", "<ESC>:FzfLua commands<CR>", mode = { "n" }, description = "Fuzzy search command", opts },
    { "<C-X>", "<ESC>:FzfLua tags<CR>", mode = { "n" }, description = "Fuzzy search code tags", opts },
    { "<C-N>", "<ESC>:FzfLua buffers<CR>", mode = { "n" }, description = "Fuzzy search buffer", opts },
    { "<C-A>", "<ESC>:FzfLua grep<CR><CR>", mode = { "n" }, description = "Fuzzy search word", opts },
    {
      "<C-S>",
      "<ESC>:FzfLua lines<CR>",
      mode = { "n" },
      description = "Fuzzy search lines of open buffers",
      opts,
    },
    {
      "<C-P>",
      "<ESC>:FzfLua git_files<CR>",
      mode = { "n" },
      description = "Fuzzy search files in Git repo",
      opts,
    },
    { "<C-D>", "<ESC>:FzfLua git_commits<CR>", mode = { "n" }, description = "Fuzzy search git commits", opts },
    {
      "<C-U>",
      "<ESC>:FzfLua git_status<CR>",
      mode = { "n" },
      description = "Fuzzy search git modified files",
      opts,
    },
    {
      "<leader>gb",
      "<ESC>:FzfLua git_branches<CR>",
      mode = { "n" },
      description = "Fuzzy search git modified files",
      opts,
    },
    -- LSP related
    {
      "<space>r",
      "<ESC>:FzfLua lsp_references<CR>",
      description = "LSP, Show references of hovered symbol",
      mode = { "n" },
      opts,
    },
    {
      "<space>e",
      ":FzfLua lsp_workspace_diagnostics<CR>",
      description = "LSP, Show all diagnostics in quickfix",
      mode = { "n" },
      opts,
    },
    {
      "<leader>gn",
      ":FzfLua git_status<CR>",
      description = "Git, see modified files, git status in fzf",
      mode = { "n" },
      opts,
    },
  })
  require("legendary").bind_commands({
    { ":SetFileType", "<ESC>:FzfLua filetypes<CR>", description = "Set Filetype" },
  })
end

function M.tabular()
  require("legendary").bind_keymaps({
    { "<leader>t=", ":Tabularize /=<CR>", mode = { "v", "n" }, description = "Align text on '='", opts },
    { "<leader>t\"", ":Tabularize /\"<CR>", mode = { "v", "n" }, description = "Align text on '\"'", opts },
    { "<leader>t:", ":Tabularize /:\zs<CR>", mode = { "v", "n" }, description = "Align text on ':'", opts },
    { "<leader>t-", ":Tabularize /-<CR>", mode = { "v", "n" }, description = "Align text on ':'", opts },
  })
end

function M.undotree()
  require("legendary").bind_keymaps({
    { "<F10>", ":UndotreeToggle<CR>", mode = { "v", "n" }, description = "Toggles Undo Tree", opts },
  })
end

function M.navigator()
  require("legendary").bind_keymaps({
    -- Window Movement
    { "<C-A-J>", ":NavigatorDown<CR>", mode = { "n" }, description = "Go a window down", opts },
    { "<C-A-K>", ":NavigatorUp<CR>", mode = { "n" }, description = "Go a window up", opts },
    { "<C-A-H>", ":NavigatorLeft<CR>", mode = { "n" }, description = "Go a window left", opts },
    { "<C-A-L>", ":NavigatorRight<CR>", mode = { "n" }, description = "Go a window right", opts },
  })
end

function M.packer()
  require("legendary").bind_keymaps({
    { "<leader>ps", ":PackerSync<CR>", mode = { "n" }, description = "Packer sync config", opts },
    { "<leader>pc", ":PackerClean<CR>", mode = { "n" }, description = "Packer clean, remove unused", opts },
    {
      "<leader>pb",
      ":PackerSnapshot " .. os.date("%Y-%m-%d_%H:%M:%S") .. "<CR>",
      mode = { "n" },
      description = "Packer snapshot",
      opts,
    },
  })
end

function M.config()
  local status_ok, legendary = pcall(require, "legendary")
  if not status_ok then
    return
  end

  local keymaps = {
    -- Cursors Movement
    { "H", "^", mode = { "n", "v" }, description = "Jump to beginning of line", opts },
    { "L", "g_", mode = { "n", "v" }, description = "Jump to end of line", opts },
    { "J", "8j", mode = { "n" }, description = "Jump 8 lines down", opts },
    { "K", "8k", mode = { "n" }, description = "Jump 8 lines up", opts },

    -- Buffer Managemant
    {
      "<leader>q",
      ":bd<CR>",
      mode = { "n" },
      description = "Close current buffer",
      opts = { noremap = true },
    },
    -- Buffer Movement, gets set up by bufferline plugin
    -- {'<C-L>',':bnext<CR>', mode = {"n"}, description = "Go to next buffer", opts },
    -- {'<C-H>',':bprevious<CR>', mode = {"n"}, description = "Go to next buffer", opts },

    -- better indenting
    { "<", "<gv", description = "Set indentation to left", mode = { "v" }, opts },
    { ">", ">gv", description = "Set indentation to right", mode = { "v" }, opts },

    -- Resizing panes
    { "<Left>", ":vertical resize +1<CR>", mode = { "n" }, description = "Change panel size to the left", opts },
    {
      "<Right>",
      ":vertical resize -1<CR>",
      "n",
      mode = { "n" },
      description = "Change panel size to the right",
      opts,
    },
    { "<Up>", ":resize -1<CR>", "n", mode = { "n" }, description = "Change panel size to the top", opts },
    { "<Down>", ":resize +1<CR>", "n", mode = { "n" }, description = "Change panel size to the bottom", opts },

    -- Move selected line / block of text in visual mode
    { "K", ":move '<-2<CR>gv-gv", "x", mode = { "x" }, description = "", opts },
    { "J", ":move '>+1<CR>gv-gv", "x", mode = { "x" }, description = "", opts },

    -- Edit
    {
      "<leader>el",
      ":edit ~/.dotfiles/config/nvim/lua/plugins/legendary.lua.symlink<CR>",
      mode = { "n" },
      description = "Edit Legendary File",
      opts,
    },
    {
      "<leader>ep",
      ":edit ~/.local/share/nvim/site/pack/packer<CR>",
      mode = { "n" },
      description = "Open packer plugin install directory",
      opts,
    },

    -- Window Managemant
    { "<leader>wo", ":only<CR>", mode = { "n" }, description = "Hide other windows", opts },
    { "<leader>wh", ":hide<CR>", mode = { "n" }, description = "Hide this window", opts },
    { "<leader>ws", ":vsplit<CR>", mode = { "n" }, description = "Split new window vertically", opts },
    { "<leader>wd", ":window diffthis<CR>", mode = { "n" }, description = "Diff this window", opts },
    { "<leader>wt", ":window diffoff<CR>", mode = { "n" }, description = "Diff off", opts },

    -- Copy to clipboard
    { "<leader>y", "\"+y", mode = { "n", "v" }, description = "Copy to clipboard", opts },
    { "<leader>Y", "\"+yg_", mode = { "n" }, description = "Copy to clipboard until end of line", opts },
    { "<leader>yy", "\"+yy", mode = { "n" }, description = "Copy entire line to clipboard", opts },

    -- Paste from clipboard
    -- { "<leader>p", '"p', mode = { "n", "v" }, description = "Paste from clipboard at current position", opts },
    -- {
    --   "<leader>P",
    --   '"P',
    --   mode = { "n", "v" },
    --   description = "Paste from clipboard before current position",
    --   opts,
    -- },

    -- easier save and exit
    { "<leader>,", ":wa<CR>", mode = { "n" }, description = "Save all buffers", opts },
    { "<leader>Q", ":qa<CR>", mode = { "n" }, description = "Quit", opts },
    { "<leader>!", ":qa!<CR>", mode = { "n" }, description = "Quit", opts },

    -- spell checker
    { "<leader>z", "1z=", mode = { "n" }, description = "Fix to first spell suggestion", opts },

    { "<leader>l", ":Legendary<cr>", mode = { "n" }, description = "open Legend", opts },
  }

  local commands = {
    { ":CopyFilePath", "let @+ = expand('%:p')", description = "Copy's current file path to clipboard" },
  }

  legendary.setup({
    -- Include builtins by default, set to false to disable
    include_builtin = true,
    -- Customize the prompt that appears on your vim.ui.select() handler
    select_prompt = "Legendary",
    keymaps = keymaps,
    commands = commands,
  })
end

return M
