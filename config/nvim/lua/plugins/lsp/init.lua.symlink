-- vi: ft=lua

return {
	-- lspconfig
	{
		"neovim/nvim-lspconfig",
		event = { "BufReadPre", "BufNewFile" },
		dependencies = {
			"williamboman/mason-lspconfig.nvim",
			{
				"ray-x/lsp_signature.nvim",
				config = true,
			},
			{
				"hrsh7th/cmp-nvim-lsp",
				cond = function()
					if not pcall(require, "lazyvim.util") then
						return false
					end
					return require("lazyvim.util").has("nvim-cmp")
				end,
			},
			{
				"Maan2003/lsp_lines.nvim",
				config = function()
					vim.diagnostic.config({
						virtual_lines = false,
						signs = false,
						float = {
							header = false,
							source = "always",
						},
					})
					require("lsp_lines").setup()
				end,
				keys = {
					{
						"<leader>uv",
						function()
							require("lsp_lines").toggle()
							local is_virtual_text = vim.diagnostic.config().virtual_text
							vim.diagnostic.config({
								virtual_text = not is_virtual_text,
							})
						end,
						desc = "Toggle Diagnostics multiline",
					},
				},
			},
		},
		---@class PluginLspOpts
		opts = {
			-- options for vim.diagnostic.config()
			-- LSP Server Settings
			---@type lspconfig.options
			servers = {
				lua_ls = {
					-- mason = false, -- set to false if you don't want this server to be installed with mason
					settings = {
						Lua = {
							workspace = {
								checkThirdParty = false,
								maxPreload = 1000,
							},
							telemetry = { enable = false },
							completion = {
								callSnippet = "Replace",
							},
						},
					},
				},
			},
			-- you can do any additional lsp server setup here
			-- return true if you don't want this server to be setup with lspconfig
			---@type table<string, fun(server:string, opts:_.lspconfig.options):boolean?>
			setup = {
				-- example to setup with typescript.nvim
				-- tsserver = function(_, opts)
				--   require("typescript").setup({ server = opts })
				--   return true
				-- end,
				-- Specify * to use this function as a fallback for any server
				-- ["*"] = function(server, opts) end,
			},
		},
	},

	{
		-- preview code with LSP code actions applied
		"aznhe21/actions-preview.nvim",
		config = function()
			require("actions-preview").setup({
				telescope = {
					sorting_strategy = "ascending",
					layout_strategy = "vertical",
					layout_config = {
						width = 0.8,
						height = 0.9,
						prompt_position = "top",
						preview_cutoff = 20,
						preview_height = function(_, _, max_lines)
							return max_lines - 15
						end,
					},
				},
			})
		end,
		keys = {
			{
				"<leader>ca",
				function()
					require("actions-preview").code_actions()
				end,
				desc = "Code Action",
				mode = { "n", "v" },
			},
		},
	},

	{
		"dnlhc/glance.nvim",
		config = function()
			require("glance").setup({
				height = math.floor(vim.api.nvim_win_get_height(0) * 0.75),
				detached = true,
				folds = {
					folded = false, -- Automatically fold list on startup
				},
			})
		end,
		keys = {
			{ "R", "<cmd>Glance references<cr>", desc = "LSP References" },
			{ "gr", "<cmd>Glance references<cr>", desc = "LSP References" },
			{ "gd", "<cmd>Glance definitions<cr>", desc = "Goto Definition" },
			{ "gt", "<cmd>Glance type_definitions<cr>", desc = "Goto Type Definition" },
			{ "gI", "<cmd>Glance implementations<cr>", desc = "Goto Implementation" },
		},
	},
}
