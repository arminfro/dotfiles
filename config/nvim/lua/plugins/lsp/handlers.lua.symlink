-- vi: ft=lua

local M = {}

function M.setup()
  local signs = {
    { name = "DiagnosticSignError", text = "ÔÅó" },
    { name = "DiagnosticSignWarn", text = "ÔÅ±" },
    { name = "DiagnosticSignHint", text = "Ô†¥" },
    { name = "DiagnosticSignInfo", text = "Ôüª" },
  }

  for _, sign in ipairs(signs) do
    vim.fn.sign_define(sign.name, { texthl = sign.name, text = sign.text, numhl = "" })
  end

  local pop_opts = { border = vim.g.floating_window_border_dark }
  vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, pop_opts)
  vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help, pop_opts)
  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
    underline = true,
    signs = true,
    virtual_text = {
      spacing = 4,
      severity_limit = "Warning",
    },
    -- update_in_insert = false,
    severity_sort = true,
  })

  -- upstream error, quickfix: https://neovim.discourse.group/t/supressing-eslint-ls-errors/1687/3
  vim.lsp.handlers["window/showMessageRequest"] = function(_, result, _)
    return result
  end

  -- vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
  --   virtual_text = false,
  --   underline = true,
  --   signs = true,
  --   update_in_insert = false,
  --   severity_sort = true,
  -- })
end

local function lsp_highlight_document(client)
  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec(
      [[
      augroup lsp_document_highlight
        autocmd! * <buffer>
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]],
      false
    )
  end
end

M.on_attach = function(client, bufnr)
  require("plugins.legendary").lsp(bufnr)
  lsp_highlight_document(client)

  local lsp_signature_status_ok, lsp_signature = pcall(require, "lsp_signature")
  if not lsp_signature_status_ok then
    return
  end

  lsp_signature.on_attach({
    -- bind = true, -- This is mandatory, otherwise border config won't get registered.
    -- doc_lines = 2, -- will show 2 lines of comment/doc(if there are more than 2 lines in doc, will be truncated)

    -- floating_window = true, -- show hint in a floating window, set to false for virtual text only mode
    -- hint_prefix = "üåü ", -- Panda for parameter
    -- hint_scheme = "String",
    -- use_lspsaga = true, -- set to true if you want to use lspsaga popup
    -- max_height = 12, -- max height of signature floating_window, if content is more than max_height, you can scroll down
    -- max_width = 120, -- max_width of signature floating_window, line will be wrapped if exceed max_width
    -- extra_trigger_chars = {}, -- Array of extra characters that will trigger signature completion, e.g., {"(", ","}
    hint_enable = true, -- virtual hint enable
    hi_parameter = "QuickFixLine", -- how your parameter will be highlight
    handler_opts = {
      border = vim.g.floating_window_border,
    },
  })

  -- local lsp_format_status_ok, lsp_format = pcall(require, "lsp-format")
  -- if not lsp_format_status_ok then
  --   return
  -- end
  -- lsp_format.on_attach(client)

  -- Formatting is done by null-ls
  -- https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Avoiding-LSP-formatting-conflicts
  client.resolved_capabilities.document_formatting = false
  client.resolved_capabilities.document_range_formatting = false

end

-- Add additional capabilities supported by nvim-cmp and snippets
M.capabilities = vim.lsp.protocol.make_client_capabilities()
M.capabilities.textDocument.completion.completionItem.snippetSupport = true

local status_ok, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")
if not status_ok then
  return M
end

M.capabilities = cmp_nvim_lsp.update_capabilities(M.capabilities)

return M
