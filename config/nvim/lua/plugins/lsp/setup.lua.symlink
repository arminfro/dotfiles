-- vi: ft=lua

local M = {}

M.config = function()
  local ok, lspconfig = pcall(require, "lspconfig")
  if not ok then
    return
  end

  local ok2, mason = pcall(require, "mason")
  if not ok2 then
    return
  end

  mason.setup({
    max_concurrent_installers = 10,
    -- log_level = vim.log.levels.TRACE,
    ui = {
      icons = {
        package_installed = "",
        package_pending = "",
        package_uninstalled = "",
      },
    },
  })

  local util = require("lspconfig.util")
  local cmp_lsp = require("cmp_nvim_lsp")
  local on_attach = require("plugins.lsp.on_attach")

  ---@param opts table|nil
  local function create_capabilities(opts)
    local default_opts = {
      with_snippet_support = true,
    }
    opts = opts or default_opts
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities.textDocument.completion.completionItem.snippetSupport = opts.with_snippet_support
    if opts.with_snippet_support then
      capabilities.textDocument.completion.completionItem.resolveSupport = {
        properties = {
          "documentation",
          "detail",
          "additionalTextEdits",
        },
      }
    end
    return cmp_lsp.default_capabilities(capabilities)
  end

  util.on_setup = util.add_hook_after(util.on_setup, function(config)
    if config.on_attach then
      config.on_attach = util.add_hook_after(config.on_attach, on_attach)
    else
      config.on_attach = on_attach
    end
    config.capabilities = create_capabilities()
  end)
  -- MasonInstall rust_analyzer sumneko_lua emmet-ls typescript-language-server luacheck shfmt fixjson stylua prettierd luaformatter lua-language-server tailwindcss-language-server solargraph json-lsp html-lsp eslint-lsp eslint_d dockerfile-language-server cssmodules-language-server css-lsp bash-language-server
  local servers = {
    "bashls",
    "cssls",
    "cssmodules_ls",
    "dockerls",
    "html",
    "jsonls",
    "solargraph",
    "tailwindcss",
    -- "lua_ls", -- waits for update in mason repo
    "tsserver",
    "zk",
    -- "emmet_ls",
    "rust_analyzer",
    -- "eslint_d",
    -- "eslint-lsp",
    -- "prettierd",
    -- "stylua",
    -- "fixjson",
    -- "shfmt",
    -- "luacheck",
  }

  local mason_lspconfig = require("mason-lspconfig")

  mason_lspconfig.setup({
    ensure_installed = servers,
    automatic_installation = true,
  })
  mason_lspconfig.setup_handlers({
    function(server_name)
      lspconfig[server_name].setup({})
    end,
    ["jsonls"] = function()
      lspconfig.jsonls.setup({
        cmd = { vim.fn.stdpath("data") .. "/mason/bin/vscode-json-language-server", "--stdio" },
        settings = {
          json = {
            validate = { enable = true },
            schemas = require("schemastore").json.schemas(),
          },
        },
      })
    end,
    -- ["lua_ls"] = function()
    --   require("neodev").setup({
    --     -- add any options here, or leave empty to use the default settings
    --   })
    --   lspconfig.lua_ls.setup({ settings = {
    --     Lua = {
    --       completion = {
    --         callSnippet = "Replace"
    --       }
    --     }
    --   } })
    -- end,
    ["tsserver"] = function()
      require("plugins.lsp.server-settings.typescript-lsp").setup()
    end,
    ["zk"] = function ()
      -- This plugin will setup and start the LSP server for you
      -- do not call require("lspconfig").zk.setup()
    end,
    ['rust_analyzer'] = function()
      local rust_tools = require("rust-tools")
      rust_tools.setup({ server = {
        on_attach = require("plugins.lsp.on_attach"),
      } })
    end,
    ["yamlls"] = function()
      lspconfig.yamlls.setup({
        settings = {
          yaml = {
            hover = true,
            completion = true,
            validate = true,
            schemas = require("schemastore").json.schemas(),
          },
        },
      })
    end,
  })
end

return M
