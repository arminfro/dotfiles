-- vi: ft=lua

local M = {}

function M.config()
  require("navigator").setup({
    -- debug = false, -- log output, set to true and log path: ~/.cache/nvim/gh.log
    -- width = 0.75, -- max width ratio (number of cols for the floating window) / (window width)
    -- height = 0.3, -- max list window height, 0.3 by default
    -- preview_height = 0.35, -- max height of preview windows
    on_attach = require("plugins.lsp.on_attach"),
    default_mapping = false, -- set to false if you will remap every key or if you using old version of nvim-
    -- keymaps = {{key = "gK", func = vim.lsp.declaration, desc = 'declaration'}}, -- a list of key maps
    -- this kepmap gK will override "gD" mapping function declaration()  in default kepmap
    -- please check mapping.lua for all keymaps
    -- treesitter_analysis = true, -- treesitter variable context
    -- this value prevent slow in large projects, e.g. found 100000 reference in a project
    transparency = 50, -- 0 ~ 100 blur the main window, 100: fully transparent, 0: opaque,  set to nil or 100 to disable it

    lsp_signature_help = true, -- if you would like to hook ray-x/lsp_signature plugin in navigator
    -- lsp_installer = false, -- set to true if you would like use the lsp installed by williamboman/nvim-lsp-installer
    -- mason = true, -- set to true if you would like use the lsp installed by williamboman/mason
    lsp = {
      -- enable = true,   -- skip lsp setup if disabled make sure add require('navigator.lspclient.mapping').setup() in you
      enable = true,
      disable_lsp = "all",
      -- own on_attach
      code_action = { enable = true, sign = true, sign_priority = 40, virtual_text = true },
      code_lens_action = { enable = true, sign = true, sign_priority = 40, virtual_text = true },
      -- document_highlight = true, -- LSP reference highlight,
      -- it might already supported by you setup, e.g. LunarVim
      format_on_save = true, -- set to false to disable lsp code format on save (if you are using prettier/efm/formater etc)
      -- format_options = {async=false}, -- async: disable by default, the option used in vim.lsp.buf.format({async={true|false}, name = 'xxx'})
      -- disable_format_cap = {"sqls", "sumneko_lua", "gopls"},  -- a list of lsp disable format capacity (e.g. if you using efm or vim-codeformat etc), empty {} by default
      -- If you using null-ls and want null-ls format your code
      -- you should disable all other lsp and allow only null-ls.
      -- disable_lsp = {'pylsd', 'sqlls'}, -- a list of lsp server disabled for your project, e.g. denols and tsserver you may
      --want to enable one lsp server at a time
      -- to disable all default config and use your own lsp setup set
      -- disable_lsp = 'all' and you may need to hook mapping.setup() in your on_attach
      -- Default {}
      diagnostic = {
        --   underline = true,
        virtual_text = true, -- show virtual for diagnostic message
        update_in_insert = false, -- update diagnostic message in insert mode
      },

      diagnostic_update_in_insert = false, -- update diagnostic message in insert mode
      disply_diagnostic_qf = true, -- always show quickfix if there are diagnostic errors, set to false if you  want to
    },
  })
end

return M
