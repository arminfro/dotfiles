-- vi: ft=lua

local M = {}

local packer_status_ok, packer = pcall(require, "packer")
if not packer_status_ok then
  return
end

local if_exe_exists = function(exe)
  return vim.fn.executable(exe) == 1
end

packer.startup({
  function(use)
    -- Plugin manager
    use({
      "wbthomason/packer.nvim",
    })

    -- Managemant tool for keybindings and commands
    use({
      "mrjones2014/legendary.nvim",
      config = function()
        require("plugins.legendary").config()
        -- let legendary call packer bindings
        require("plugins.legendary").packer()
      end,
    })

    -- Boost startup time
    use({
      "lewis6991/impatient.nvim",
    })

    -- Notifications
    use({
      "rcarriga/nvim-notify",
      config = function()
        require("notify").setup({
          background_colour = "#000000",
        })
        vim.notify = require("notify")
      end,
    })

    -- Lua functions
    use({
      "nvim-lua/plenary.nvim",
    })

    -- Popup API
    use({
      "nvim-lua/popup.nvim",
    })

    -- todo, set filetype on .symlink ending
    use({
      "nathom/filetype.nvim",
    })

    -- Cursorhold fix
    -- use({
    --   "antoinemadec/FixCursorHold.nvim",
    --   event = "BufRead",
    --   config = function()
    --     vim.g.cursorhold_updatetime = 100
    --   end,
    -- })

    -- Icons
    use({
      "kyazdani42/nvim-web-devicons",
      config = function()
        require("plugins.icons").config()
      end,
    })

    -- Focus on code in floating window
    use({
      "hoschi/yode-nvim",
      event = "BufEnter",
      config = function()
        require("yode-nvim").setup({})
        require("plugins.legendary").yode()
      end,
    })

    -- Better Git diffing
    -- see :h diffview-config for default keybindings
    use({
      "sindrets/diffview.nvim",
      event = "BufRead",
      disable = not if_exe_exists("git"),
      config = function()
        require("plugins.legendary").diffview()
      end,
      requires = "nvim-lua/plenary.nvim",
    })

    -- Generate code documentation
    use({
      "danymat/neogen",
      cmd = "Neogen",
      config = function()
        require("neogen").setup({
          enabled = true,
          jump_map = "<tab>",
        })
      end,
    })

    -- -- mini plugin with different functions
    -- use({
    --   "echasnovski/mini.nvim",
    --   config = function()
    --     local indentscope = require("mini.indentscope")
    --     indentscope.setup({
    --       ---@diagnostic disable-next-line: missing-parameter -- it's optional
    --       draw = { animation = indentscope.gen_animation("none") },
    --       symbol = "Â¦",
    --     })
    --   end,
    -- })

    -- adds indentation guides to all lines
    use({
      "lukas-reineke/indent-blankline.nvim",
      -- event = "BufRead",
      config = function()
        -- vim.g.indent_blankline_disable_warning_message = false
        require("indent_blankline").setup({
          space_char_blankline = " ",
          show_current_context = true,
          show_current_context_start = true,
        })
      end,
    })

    -- highlighting the whole area between matching delimiters ('{}' '[]' '()' '<>')
    use({
      "rareitems/hl_match_area.nvim",
      config = function()
        require("hl_match_area").setup()
      end,
    })

    -- highlighting word under the cursor (only for visible lines)
    use({
      "tzachar/local-highlight.nvim",
      config = function()
        require("local-highlight").setup({
          hlgroup = "TSDefinitionUsage",
        })
      end,
    })

    -- generate git links
    use({
      "ruifm/gitlinker.nvim",
      disable = not if_exe_exists("git"),
      event = "BufEnter",
      requires = "nvim-lua/plenary.nvim",
      config = function()
        require("gitlinker").setup({})
        require("plugins.legendary").gitlinker()
      end,
    })

    use({
      "kevinhwang91/nvim-hlslens",
      config = function()
        -- require('hlslens').setup() is not required
        require("scrollbar.handlers.search").setup({})
      end,
      requires = { "petertriho/nvim-scrollbar" },
    })

    -- -- scrollbar on the right
    use({
      "petertriho/nvim-scrollbar",
      config = function()
        require("scrollbar").setup()
      end,
    })

    -- reasonable defaults for most search-related vim features
    -- breaks completion of search
    -- use({ "wincent/loupe" })

    -- folding plugin
    -- use({
    --   "kevinhwang91/nvim-ufo",
    --   requires = "kevinhwang91/promise-async",
    --   config = function()
    --     -- vim.wo.foldcolumn = "1"
    --     vim.wo.foldlevel = 99 -- feel free to decrease the value
    --     vim.wo.foldmethod = "manual"
    --     vim.wo.foldenable = true
    --     local capabilities = vim.lsp.protocol.make_client_capabilities()
    --     capabilities.textDocument.foldingRange = {
    --       dynamicRegistration = false,
    --       lineFoldingOnly = true,
    --     }

    --     require("ufo").setup()
    --   end,
    -- })

    -- lazygit vim frontend
    use({
      "kdheepak/lazygit.nvim",
      disable = not if_exe_exists("lazygit"),
      config = function()
        require("plugins.legendary").lazygit()
      end,
    })

    -- collection of language packs
    use({ "sheerun/vim-polyglot", event = "BufEnter" })

    -- Search for what's visualized, by *
    use({ "nelstrom/vim-visual-star-search", event = "BufEnter" })

    -- Look up bindings of keys
    -- use({
    --   "AckslD/nvim-whichkey-setup.lua",
    --   requires = { "liuchengxu/vim-which-key" },
    --   config = function()
    --     require("plugins.legendary").which_key()
    --   end,
    -- })

    -- Look at urls in document, also list plugin links
    use({
      "axieax/urlview.nvim",
      cmd = "UrlView",
      config = function()
        require("urlview").setup({
          default_picker = "telescope",
        })
      end,
    })

    -- use({
    --   "ldelossa/litee.nvim",
    --   config = function()
    --     require("litee.lib").setup({
    --       tree = {
    --         icon_set = "codicons",
    --       },
    --       panel = {
    --         orientation = "left",
    --         panel_size = 30,
    --       },
    --     })
    --     require("litee.calltree").setup({})
    --     require("litee.symboltree").setup({})
    --     require("litee.filetree").setup({})
    --     require("litee.bookmarks").setup({})
    --   end,
    --   requires = {
    --     "ldelossa/litee-calltree.nvim",
    --     "ldelossa/litee-symboltree.nvim",
    --     "ldelossa/litee-filetree.nvim",
    --     "ldelossa/litee-bookmarks.nvim",
    --     "kyazdani42/nvim-web-devicons",
    --   },
    -- })

    -- Smooth scrolling
    -- use({
    --   "declancm/cinnamon.nvim",
    --   config = function()
    --     require("cinnamon").setup()
    --   end,
    -- })

    -- Rust support
    use({
      "rust-lang/rust.vim",
      disable = not if_exe_exists("rustc"),
      event = "BufRead",
      config = function()
        vim.g.rustfmt_autosave = 1
      end,
    })

    -- File explorer
    -- todo, may exchange with nvim-neo-tree/neo-tree.nvim
    use({
      "nvim-neo-tree/neo-tree.nvim",
      branch = "v2.x",
      requires = {
        "nvim-lua/plenary.nvim",
        "kyazdani42/nvim-web-devicons", -- not strictly required, but recommended
        "MunifTanjim/nui.nvim",
      },
      config = function()
        require("plugins.tree").config()
      end,
    })

    -- smoothly navigate between splits and panes
    use({
      "numToStr/Navigator.nvim",
      -- tag = "v0.4.* ",
      config = function()
        require("Navigator").setup({})
        require("plugins.legendary").navigator()
      end,
    })

    -- nvim http client (curl wrapper)
    use({
      "NTBBloodbath/rest.nvim",
      disable = not if_exe_exists("curl"),
      requires = { "nvim-lua/plenary.nvim" },
      event = "BufEnter",
      config = function()
        require("rest-nvim").setup({
          -- Open request results in a horizontal split
          result_split_horizontal = false,
          -- Skip SSL verification, useful for unknown certificates
          skip_ssl_verification = false,
          -- Highlight request on run
          highlight = {
            enabled = true,
            timeout = 150,
          },
          result = {
            -- toggle showing URL, HTTP info, headers at top the of result window
            show_url = true,
            show_http_info = true,
            show_headers = true,
          },
          -- Jump to request line on run
          jump_to_request = false,
          env_file = ".env",
          custom_dynamic_variables = {},
          yank_dry_run = true,
        })
        require("plugins.legendary").http_rest()
      end,
    })

    -- use({
    --   "skywind3000/asynctasks.vim",
    --   requires = "skywind3000/asyncrun.vim",
    --   -- config = function() end,
    -- })

    use({
      "nvim-telescope/telescope.nvim",
      tag = "0.1.*",
      requires = {
        "gbprod/yanky.nvim",
        "kdheepak/lazygit.nvim",
        "rcarriga/nvim-notify",
        "nvim-telescope/telescope-symbols.nvim",
        "nvim-telescope/telescope-frecency.nvim",
        "nvim-telescope/telescope-project.nvim",
        "nvim-telescope/telescope-node-modules.nvim",
        "nvim-telescope/telescope-ui-select.nvim",
        "nvim-telescope/telescope-file-browser.nvim",
        "crispgm/telescope-heading.nvim",
        "LinArcX/telescope-env.nvim",
        "olacin/telescope-cc.nvim",
        "nvim-telescope/telescope-packer.nvim",
        "benfowler/telescope-luasnip.nvim",
        "LinArcX/telescope-changes.nvim",
        "olimorris/persisted.nvim",
        "stevearc/aerial.nvim",
        -- "folke/trouble.nvim",
      },
      config = function()
        require("plugins.telescope").config()
        require("plugins.legendary").telescope()
      end,
    })

    use({
      "nvim-telescope/telescope-fzf-native.nvim",
      requires = { "nvim-telescope/telescope.nvim" },
      run = "make",
    })

    use({
      "jackMort/ChatGPT.nvim",
      config = function()
        require("chatgpt").setup({
          -- optional configuration
        })
      end,
      requires = {
        "MunifTanjim/nui.nvim",
        "nvim-lua/plenary.nvim",
        "nvim-telescope/telescope.nvim",
      },
    })

    -- animate cursors movements
    -- use({
    --   "echasnovski/mini.nvim",
    --   config = function ()
    --     require('mini.animate').setup()
    --   end
    -- })

    -- gives yank history
    use({
      "gbprod/yanky.nvim",
      config = function()
        require("yanky").setup()
        require("plugins.legendary").yanky()
      end,
    })

    use({
      "olimorris/persisted.nvim",
      config = function()
        require("persisted").setup({
          use_git_branch = true,
          branch_separator = "@@",
        })
      end,
    })

    -- use({
    --   "nvim-telescope/telescope-project.nvim",
    --   requires = { "nvim-telescope/telescope.nvim" },
    -- })

    use({
      "nvim-telescope/telescope-frecency.nvim",
      config = function()
        require("telescope").load_extension("frecency")
      end,
      requires = { "tami5/sqlite.lua" },
    })

    -- Completion engine
    use({
      "hrsh7th/nvim-cmp",
      -- event = "BufRead",
      config = function()
        require("plugins.cmp").config()
      end,
      requires = {
        -- completion for snippets
        {
          "saadparwaiz1/cmp_luasnip",
          requires = {
            -- Snippet engine
            {
              "L3MON4D3/LuaSnip",
              config = function()
                require("luasnip/loaders/from_vscode").lazy_load({
                  paths = {
                    "~/.config/nvim/snippets",
                    "~/.local/share/nvim/site/pack/packer/start/friendly-snippets",
                  },
                })
                require("plugins.legendary").luasnip()
              end,
              requires = {
                -- Snippet collections
                "rafamadriz/friendly-snippets",
              },
            },
          },
        },
        {
          "roobert/tailwindcss-colorizer-cmp.nvim",
          -- optionally, override the default options:
          config = function()
            require("tailwindcss-colorizer-cmp").setup({
              color_square_width = 2,
            })
          end,
        },
        { "lukas-reineke/cmp-under-comparator" },
        -- completion for buffers
        { "hrsh7th/cmp-buffer" },
        { "hrsh7th/cmp-path" },
        -- Completions for command mode
        { "hrsh7th/cmp-cmdline" },
        { "hrsh7th/cmp-emoji" },
        -- completion for calculations
        { "hrsh7th/cmp-calc" },
        -- completion for neovim lua api
        { "hrsh7th/cmp-nvim-lua" },
        -- better sort completion items that start with one or more underlines
        { "lukas-reineke/cmp-rg" },
        { "petertriho/cmp-git" },
        { "lukas-reineke/cmp-under-comparator" },
        {
          "uga-rosa/cmp-dictionary",
          config = function()
            local dictionaries = {
              "~/.config/nvim/spell/english-autocomplete.txt",
              "~/.config/nvim/spell/german-autocomplete.txt",
            }
            require("cmp_dictionary").setup({
              dic = {
                ["markdown"] = dictionaries,
                ["gitcommit"] = dictionaries,
              },
            })
          end,
        },
        {
          -- collection of configurations for built-in language server client
          "neovim/nvim-lspconfig",
          config = function()
            require("plugins.lsp")
            require("plugins.legendary").lsp()
          end,
          requires = {
            "ray-x/lsp_signature.nvim",
            "williamboman/mason.nvim",
            "williamboman/mason-lspconfig.nvim",
            "shoukoo/stylua.nvim",
            -- json,yml, schema definition
            { "b0o/schemastore.nvim" },
            -- nvim lua api type_definition
            { "folke/neodev.nvim" }, -- lua vim api completion
            -- completion plugin for lsp
            { "hrsh7th/cmp-nvim-lsp" },
            -- Show function signature when you type
            { "hrsh7th/cmp-nvim-lsp-signature-help" },
            -- / search completed by nvim-cmp
            { "hrsh7th/cmp-nvim-lsp-document-symbol" },
            -- ctags completion
            { "quangnguyen30192/cmp-nvim-tags" },
            -- rust features
            { "simrat39/rust-tools.nvim" },
            {
              "lvimuser/lsp-inlayhints.nvim",
              event = "LspAttach",
              commit = "0df2f61",
              config = function()
                require("plugins.lsp.inlayhints").config()
              end,
            },
            {
              "Maan2003/lsp_lines.nvim",
              config = function()
                require("plugins.lsp-line").config()
                require("plugins.legendary").lsp_lines()
              end,
            },
            {
              -- linter which integrates into lsp
              "jose-elias-alvarez/null-ls.nvim",
              requires = {
                "nvim-lua/plenary.nvim",
                -- typescript lsp utilities
                "jose-elias-alvarez/typescript.nvim",
              },
              config = require("plugins.null-ls").config,
            },
            {
              -- add closing pairs () [] ...
              "windwp/nvim-autopairs",
              after = "nvim-cmp",
              config = function()
                require("plugins.autopairs").config()
              end,
            },
            -- zettelkasten with lsp support
            {
              "mickael-menu/zk-nvim",
              disable = not if_exe_exists("zk"),
              config = function()
                require("plugins.zk").config()
                require("plugins.legendary").zk()
              end,
            },
            {
              "stevearc/aerial.nvim",
              config = function()
                require("aerial").setup({
                  layout = { min_width = 20 },
                  manage_folds = true,
                })
              end,
            },
            {
              -- tree like view for symbols using lsp
              "simrat39/symbols-outline.nvim",
              config = function()
                require("plugins.symbols-outline").setup()
                require("plugins.legendary").symbols_outline()
              end,
            },
            {
              -- LSP enhancement
              "ray-x/navigator.lua",
              -- tag = "v0.4.*",
              -- event = "BufRead",
              config = function()
                require("plugins.lsp.navigator").config()
                require("plugins.legendary").lsp_navigator()
              end,
              requires = {
                { "ray-x/guihua.lua", run = "cd lua/fzy && make" },
                { "neovim/nvim-lspconfig" },
                { "nvim-treesitter/nvim-treesitter" },
              },
            },
            {
              -- lsp navigation component
              "SmiteshP/nvim-navic",
              config = function()
                require("nvim-navic").setup({
                  icons = {
                    Constant = "î­ ",
                  },
                })
                vim.o.winbar = "%{%v:lua.require'nvim-navic'.get_location()%}"
              end,
            },

            -- {
            --   "mfussenegger/nvim-dap",
            --   requires = {
            --     {
            --       "suketa/nvim-dap-ruby",
            --       before = "nvim-lspconfig",
            --       config = function()
            --         require("dap-ruby").setup()
            --       end,
            --     },
            --     { "jbyuki/one-small-step-for-vimkind", before = "nvim-lspconfig" },
            --     { "rcarriga/nvim-dap-ui", before = "nvim-lspconfig" },
            --     -- has some helper function to configure dap
            --     { "simrat39/rust-tools.nvim", before = "nvim-lspconfig" },
            --     { "theHamsta/nvim-dap-virtual-text" },
            --   },
            --   before = "nvim-lspconfig",
            --   config = function()
            --     require("plugins.dap").config()
            --   end,
            -- },
          },
        },
      },
    })

    use({
      "luukvbaal/statuscol.nvim",
      config = function()
        require("statuscol").setup({ setopt = true })
        -- vim.o.statuscolumn = "%@v:lua.ScFa@%C%T%@v:lua.ScLa@%s%T@v:lua.ScNa@%=%{v:lua.ScLn()}%T"
      end,
    })

    -- window picker
    use({
      "https://gitlab.com/yorickpeterse/nvim-window.git",
      config = function()
        require("nvim-window").setup({
          chars = {
            "h",
            "j",
            "k",
            "l",
            "a",
            "s",
            "d",
            "f",
          },
        })
        require("plugins.legendary").nvim_window()
      end,
      event = "BufRead",
    })

    use({
      "bennypowers/nvim-regexplainer",
      config = function()
        require("regexplainer").setup({ auto = true })
      end,
      requires = {
        "nvim-treesitter/nvim-treesitter",
        "MunifTanjim/nui.nvim",
      },
    })

    use({
      "axelvc/template-string.nvim",
      config = function()
        require("template-string").setup({
          filetypes = { "typescript", "javascript", "typescriptreact", "javascriptreact" },
          jsx_brackets = true, -- must add brackets to jsx attributes
          remove_template_string = false, -- remove backticks when there are no template string
        })
      end,
      requires = "nvim-treesitter/nvim-treesitter",
    })

    -- use coverage log to display coverage
    use({
      "andythigpen/nvim-coverage",
      requires = "nvim-lua/plenary.nvim",
      config = function()
        require("coverage").setup({})
      end,
    })

    use({
      "nvim-neotest/neotest",
      requires = {
        "haydenmeade/neotest-jest",
      },
      config = function()
        require("neotest").setup({
          adapters = {
            require("neotest-jest")({
              jestCommand = "npm test --",
              -- jestConfigFile = "custom.jest.config.ts",
              env = { CI = true },
              cwd = function()
                return vim.fn.getcwd()
              end,
            }),
          },
        })
        require("plugins.legendary").neotest()
      end,
    })

    -- pretty list for showing diagnostics, references, quickfix and location lists
    -- see config & keymaps: https://github.com/folke/trouble.nvim#setup
    use({
      "folke/trouble.nvim",
      requires = { "kyazdani42/nvim-web-devicons" },
      config = function()
        require("plugins.trouble").config()
        require("plugins.legendary").trouble()
      end,
    })

    -- Start screen
    use({
      "mhinz/vim-startify",
      config = function()
        require("plugins.startify").config()
      end,
    })

    -- change surroundings
    use({
      "kylechui/nvim-surround",
      event = "BufRead",
      config = function()
        require("nvim-surround").setup()
      end,
    })

    -- dot repeat command improved
    use({
      "tpope/vim-repeat",
      event = "BufRead",
    })

    -- sugar for the UNIX shell commands
    -- use("tpope/vim-eunuch")

    -- supported langs: Ruby, Lua, Vimscript, Bash
    use({
      "RRethy/nvim-treesitter-endwise",
      config = function()
        require("nvim-treesitter.configs").setup({
          endwise = {
            enable = true,
          },
        })
      end,
    })

    -- Commands: TSContextEnable, TSContextDisable and TSContextToggle
    use({
      "nvim-treesitter/nvim-treesitter-context",
      config = function()
        vim.api.nvim_command("hi TreesitterContext gui=none guisp=Grey")
        vim.api.nvim_command("hi TreesitterContextBottom gui=underline guisp=Grey")
      end,
    })

    use({
      "haringsrob/nvim_context_vt",
    })

    -- editorconfig support
    use("editorconfig/editorconfig-vim")

    -- nice ui elements like select and input
    use({
      "stevearc/dressing.nvim",
      config = function()
        require("plugins.dressing").config()
      end,
    })

    -- automatically call mkdir -p if path doesn't exist on save
    use("pbrisbin/vim-mkdir")

    -- visualize undo tree
    use({
      "mbbill/undotree",
      cmd = "UndotreeToggle",
      config = function()
        require("plugins.legendary").undotree()
      end,
    })

    -- AutoSave
    use({
      "pocco81/auto-save.nvim",
      event = "BufRead",
      commit = "8df684b",
      config = function()
        require("autosave").setup({
          -- breaking change after locked commit, otherwise:
          -- require("auto-save").setup({
          -- trigger_events = { "FocusLost" },
          events = { "FocusLost" },
          execution_message = nil,
          write_all_buffers = true,
        })
      end,
    })

    -- Terminal
    use({
      "akinsho/nvim-toggleterm.lua",
      config = function()
        require("plugins.toggleterm").config()
        require("plugins.legendary").toggleterm()
      end,
    })

    -- show param names while typing
    use({
      "lewis6991/spellsitter.nvim",
      event = "BufRead",
      config = function()
        require("spellsitter").setup()
      end,
    })

    -- Syntax highlighting
    use({
      "nvim-treesitter/nvim-treesitter",
      -- event = "BufRead",
      run = ":TSUpdate",
      config = function()
        require("plugins.treesitter").config()
      end,
      requires = {
        {
          -- Parenthesis highlighting
          "p00f/nvim-ts-rainbow",
          after = "nvim-treesitter",
        },
        {
          -- Autoclose tags
          -- todo, autorename seems broken
          "windwp/nvim-ts-autotag",
          -- branch = "main",
          -- before = "nvim-treesitter",
          -- config = function()
          --   require("nvim-ts-autotag").setup()
          -- end,
        },
        {
          -- Context based commenting
          "JoosepAlviste/nvim-ts-context-commentstring",
          after = "nvim-treesitter",
          requires = {
            -- comment plugin
            {
              "tpope/vim-commentary",
              event = "BufRead",
            },
          },
        },
        -- {
        --   -- Refactor utilities, currently doesnt work, try later
        --   "ThePrimeagen/refactoring.nvim",
        --   requires = { "nvim-treesitter", "plenary.nvim"},
        --   config =function()
        --     require('refactoring').setup({})
        --     require("plugins.legendary").refactoring()
        --   end
        -- },
      },
    })

    -- highlights which characters to target for f, F and family.
    use({
      "kepbod/quick-scope",
      config = function()
        vim.g.qs_highlight_on_keys = { "f", "F", "t", "T" }
      end,
    })

    -- Incremental rename command with TS visualized feedback
    -- use({
    --   "smjonas/inc-rename.nvim",
    --   cmd = "IncRename",
    --   config = function()
    --     require("inc_rename").setup()
    --   end,
    -- })

    -- 4 basic motions: jump to next/previous sibling in the tree, jump to parent, and jump to child
    -- use({
    --   "drybalka/tree-climber.nvim",
    --   config = function()
    --     require("plugins.legendary").tree_climber()
    --   end,
    -- })

    -- <leader>Z to toggle maximizing the current neovim window
    use({
      "declancm/maximize.nvim",
      config = function()
        require("maximize").setup({ default_keymaps = false })
        require("plugins.legendary").maximize()
      end,
    })

    -- standalone UI for nvim-lsp progress, currently issue with buffers,
    -- temporally deactivated
    use({
      "j-hui/fidget.nvim",
      config = function()
        require("fidget").setup({
          window = {
            relative = "editor",
            blend = 10,
          },
        })
      end,
    })

    -- highlights function arguments usage same as argument itself
    use({
      "m-demare/hlargs.nvim",
      requires = { "nvim-treesitter/nvim-treesitter", "rebelot/kanagawa.nvim" },
      config = function()
        require("hlargs").setup({ color = require("kanagawa.colors").setup().surimiOrange })
      end,
    })

    -- ts node actions, like case swapping, boolean toggling, more...
    -- seems buggy, not stable, look later
    -- use({
    --   'ckolkey/ts-node-action',
    --   requires = { 'nvim-treesitter',
    --     'jose-elias-alvarez/null-ls.nvim'
    --   },
    --   config = function()
    --     require("ts-node-action").setup({})
    --     require "null-ls".register({
    --       name = "ts-node-actions",
    --       method = { require "null-ls".methods.CODE_ACTION },
    --       filetypes = { "_all" },
    --       generator = {
    --         fn = require("ts-node-action").available_actions
    --       }
    --     })
    --   end
    -- })

    -- Bufferline
    use({
      "akinsho/bufferline.nvim",
      tag = "v3.*",
      config = function()
        require("plugins.bufferline").config()
      end,
      requires = {
        "kyazdani42/nvim-web-devicons",
        "rebelot/kanagawa.nvim",
      },
    })

    -- Statusline
    use({
      "nvim-lualine/lualine.nvim",
      -- after = "bufferline.nvim",
      event = "BufRead",
      config = function()
        require("plugins.lualine").config()
      end,
      requires = {
        "rebelot/kanagawa.nvim",
        "SmiteshP/nvim-navic",
        {
          -- Show commit info at current line on cursorhold
          "f-person/git-blame.nvim",
          disable = not if_exe_exists("git"),
          config = function()
            vim.g.gitblame_display_virtual_text = 0
            vim.g.gitblame_date_format = "%r"
            vim.g.gitblame_highlight_group = "Question"
            vim.g.gitblame_message_template = "<date> â¢ <summary>"
          end,
        },
      },
    })

    -- Git status left of line number
    -- see :h gitsigns-mappings for default keybindings
    use({
      "lewis6991/gitsigns.nvim",
      disable = not if_exe_exists("git"),
      event = "BufRead",
      config = function()
        require("plugins.gitsigns").config()
        require("scrollbar.handlers.gitsigns").setup()
      end,
    })

    -- git wrapper
    use({
      "tpope/vim-fugitive",
      disable = not if_exe_exists("git"),
      config = function()
        require("plugins.legendary").fugitive()
      end,
    })

    -- Code Snippet Runner
    use({
      "michaelb/sniprun",
      run = "bash install.sh",
      config = function()
        require("sniprun").setup({})
      end,
    })

    -- place, toggle and display marks
    -- keybindings: https://github.com/chentoast/marks.nvim#mappings
    -- use({
    --   "chentoast/marks.nvim",
    --   event = "BufRead",
    -- })

    -- measure start up time
    use("dstein64/vim-startuptime")

    -- Syntax file for i3 config
    use({ "mboughaba/i3config.vim", event = "BufRead", ft = "i3config", disable = not if_exe_exists("i3") })

    -- Latex autocompile
    use({ "donRaphaco/neotex", ft = "tex" })

    use({
      "lervag/vimtex",
      ft = "tex",
      config = function()
        vim.g.vimtex_view_method = "zathura"
      end,
    })

    -- reveal the hidden message from Git under the cursor quickly
    use({
      "rhysd/git-messenger.vim",
      disable = not if_exe_exists("git"),
      event = "BufRead",
      config = function()
        vim.g.git_messenger_floating_win_opts = { border = vim.g.floating_window_border_dark }
        require("plugins.legendary").git_messenger()
      end,
    })

    -- asynchronously displaying the colours in the file
    use({
      "rrethy/vim-hexokinase",
      disable = not if_exe_exists("go"),
      run = "make hexokinase",
      event = "BufRead",
      config = function()
        vim.g.Hexokinase_optInPatterns = "full_hex,rgb,rgba,hsl,hsla"
      end,
    })

    -- dims your inactive windows, making it easier to see the active window at a glance
    -- BUG: does not work well with git-messenger
    -- use({
    --   "sunjon/shade.nvim",
    --   event = "BufRead",
    --   config = function()
    --     require("shade").setup({
    --       overlay_opacity = 70,
    --     })
    --   end,
    -- })

    -- camel case is one word
    use("bkad/camelcasemotion")

    -- align text
    use({
      "godlygeek/tabular",
      event = "BufRead",
      config = function()
        require("plugins.legendary").tabular()
      end,
      after = "legendary.nvim",
    })

    -- line joining and splitting
    use({
      "Wansmer/treesj",
      requires = { "nvim-treesitter" },
      config = function()
        require("treesj").setup({ --[[ your config ]]
          use_default_keymaps = false,
          max_join_length = 200,
        })
        require("plugins.legendary").treesj()
      end,
    })

    -- useless inspiration
    use({
      "eandrju/cellular-automaton.nvim",
      config = function()
        require("plugins.legendary").ceullular_automaton()
      end,
    })

    -- bionic reading with FSToggle
    use({
      "nullchilly/fsread.nvim",
      -- config = function()
      -- vim.api.nvim_command('autocmd BufRead *.md FSToggle')
      -- end,
    })

    -- use({
    --   "gbprod/substitute.nvim",
    --   config = function()
    --     require("substitute").setup({})
    --     vim.keymap.set("n", "s", "<cmd>lua require('substitute').operator()<cr>", { noremap = true })
    --     vim.keymap.set("n", "ss", "<cmd>lua require('substitute').line()<cr>", { noremap = true })
    --     vim.keymap.set("n", "S", "<cmd>lua require('substitute').eol()<cr>", { noremap = true })
    --     vim.keymap.set("x", "s", "<cmd>lua require('substitute').visual()<cr>", { noremap = true })
    --   end,
    -- })

    -- motion plugin, uses s
    -- use({
    --   "ggandor/leap.nvim",
    --   event = "BufRead",
    --   config = function()
    --     require("leap").set_default_keymaps()
    --   end,
    -- })

    -- horizontal highlights for text filetypes like markdown, rmd, vimwiki and orgmode.
    use({
      "lukas-reineke/headlines.nvim",
      event = "BufRead",
      config = function()
        require("headlines").setup()
      end,
    })

    -- markdown helper
    -- <C-k> add link to visually selected text
    -- <C-b> toggle visually selected text bold
    -- <C-i> toggle visually selected text italic
    -- <C-c> toggle visually selected text inline code
    use({
      "antonk52/markdowny.nvim",
      config = function()
        require("markdowny").setup({ filetypes = { "markdown", "txt" } })
      end,
    })

    -- markdown set of functions and and mappings to those functions
    -- which make it easy to navigate and manipulate markdown notebooks/journals/wikis
    -- https://github.com/jakewvincent/mkdnflow.nvim#-commands-and-default-mappings
    -- use({
    --   "jakewvincent/mkdnflow.nvim",
    --   event = "BufRead",
    --   config = function()
    --     vim.o.autowriteall = true
    --     require("mkdnflow").setup({})
    --   end,
    -- })

    -- convert markdown using pandoc
    use({
      "jghauser/auto-pandoc.nvim",
      requires = "nvim-lua/plenary.nvim",
      disable = not if_exe_exists("pandoc"),
      event = "BufRead",
      config = function()
        require("auto-pandoc")
        require("plugins.legendary").auto_pandoc()
      end,
    })

    -- paste image from clipboard in markdown
    use({
      "ekickx/clipboard-image.nvim",
      event = "BufRead",
      config = function()
        require("clipboard-image").setup({
          default = {
            img_dir = os.getenv("ZK_NOTEBOOK_DIR") .. "/media/imgs",
            img_name = function()
              return os.date("%Y-%m-%d-%H-%M-%S")
            end,
          },
        })
      end,
    })

    -- markdown in vim float window rendering
    use({
      "ellisonleao/glow.nvim",
      event = "BufRead",
      config = function()
        require("plugins.legendary").glow()
      end,
    })

    -- markdown in browser rendering
    use({ "iamcco/markdown-preview.nvim", event = "BufRead", run = "cd app && yarn install" })

    -- AnsiEsc Command
    use({ "powerman/vim-plugin-AnsiEsc", cmd = "AnsiEsc" })

    -- writing support
    use({
      "Pocco81/AbbrevMan.nvim",
      config = function()
        local abbrev_man = require("abbrev-man")

        abbrev_man.setup({
          load_natural_dictionaries_at_startup = true,
          load_programming_dictionaries_at_startup = true,
          natural_dictionaries = {
            ["nt_en"] = {},
            ["nt_de"] = require("plugins.abbrev").german_vowel_dict,
          },
          programming_dictionaries = {
            ["pr_ts"] = {
              ["cosnt"] = "const",
              ["conts"] = "const",
              ["esle"] = "else",
              ["fi"] = "if",
              ["ipmort"] = "import",
              ["improt"] = "import",
              ["impotr"] = "import",
            },
          },
        })
      end,
    })

    -- dark neovim colorscheme
    use({
      "rebelot/kanagawa.nvim",
      config = require("plugins.kanagawa").config,
    })

    -- make Neovim's quickfix window better
    use({
      "romainl/vim-qf",
      config = function()
        vim.g.qf_nowrap = false
        vim.g.qf_max_height = 20
      end,
      requires = {
        {
          "kevinhwang91/nvim-bqf",
          config = function()
            require("bqf").setup({
              preview = {
                delay_syntax = 0,
              },
            })
          end,
        },
        {
          "https://gitlab.com/yorickpeterse/nvim-pqf.git",
          config = function()
            require("pqf").setup({
              signs = {
                error = "ï",
                warning = "ïª",
                info = "ï",
                hint = "ï",
              },
            })
          end,
        },
      },
    })

    -- add later
    -- AckslD/nvim-revJ.lua
    -- FuDesign2008/json2ts.vim

    -- throws error cause of python dependency, todo
    -- use {'gelguy/wilder.nvim',
    --   config = function ()
    --     require('wilder').setup({
    --       modes = { ':' },
    --       use_python_remote_plugin = 0,
    --     })
    --   end,
    -- }

    -- use "vim-scripts/CmdlineComplete"

    -- replaces asteriks with bullets
    -- use {
    --   "akinsho/org-bullets.nvim",
    --   config = function()
    --     require("org-bullets").setup {}
    --   end,
    -- }

    -- todo, look into
    -- use {
    --   "nvim-neorg/neorg",
    --   config = function()
    --   end
    -- }

    -- is for telescope only (yet)
    -- use {'ahmedkhalf/project.nvim',
    --   config = function ()
    --     require("nvim-tree").setup({})
    --   end,
    -- }

    -- winresizer - window resize mode by `Ctrl+I`
    -- use {
    -- "simeji/winresizer",
    --   config = function()
    --     vim.g.winresizer_start_key = '<C-I>'
    --   end,
    -- }

    -- auto saves and loads vim sessions
    -- don't lazy load, https://github.com/rmagatti/auto-session#recommended-sessionoptions-config
    use({
      "rmagatti/auto-session",
      requires = "nvim-lualine/lualine.nvim",
      config = function()
        require("auto-session").setup({
          -- auto_session_enable_last_session = false,
          log_level = "error",
          auto_session_enable_last_session = false,
          auto_restore_enabled = false,
          auto_session_use_git_branch = true,
          cwd_change_handling = {
            post_cwd_changed_hook = function()
              -- refresh lualine so the new session name is displayed in the status bar
              require("lualine").refresh()
            end,
          },
        })
      end,
    })

    -- generate 'print' statements appropriate to the language being edited
    use({
      "andrewferrier/debugprint.nvim",
      event = "BufRead",
      config = function()
        require("debugprint").setup({})
      end,
    })

    -- visualise and resolve gti conflicts
    use({
      "akinsho/git-conflict.nvim",
      tag = "*",
      config = function()
        require("git-conflict").setup()
      end,
    })
  end,
  config = {
    display = {
      open_fn = require("packer.util").float,
    },
    compile_on_sync = true,
  },
})

return M
