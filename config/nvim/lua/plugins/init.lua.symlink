-- vi: ft=lua

local M = {}

local packer_status_ok, packer = pcall(require, "packer")
if not packer_status_ok then
  return
end

local packer_group = vim.api.nvim_create_augroup("Packer", { clear = true })

local if_exe_exists = function(exe)
  return vim.fn.executable(exe) == 1
end

vim.api.nvim_create_autocmd("BufWritePost", {
  pattern = "*/config/nvim/lua/plugins/init.lua.symlink",
  command = "PackerCompile",
  group = packer_group,
})

-- add later
-- AckslD/nvim-revJ.lua
-- FuDesign2008/json2ts.vim
packer.startup({
  function(use)
    -- Plugin manager
    use({
      "wbthomason/packer.nvim",
    })

    -- Managemant tool for keybindings and commands
    use({
      "mrjones2014/legendary.nvim",
      config = function()
        require("plugins.legendary").config()
        -- let legendary call packer bindings
        require("plugins.legendary").packer()
      end,
    })

    -- Optimiser
    use({
      "lewis6991/impatient.nvim",
    })

    -- Notifications
    use({
      "rcarriga/nvim-notify",
      config = function()
        require("notify").setup({})
        vim.notify = require("notify")
      end,
    })

    -- Code Snippet Runner
    use({
      "michaelb/sniprun",
      run = "bash install.sh",
      config = function()
        require("sniprun").setup({})
      end,
    })

    -- Lua functions
    use({
      "nvim-lua/plenary.nvim",
    })

    -- Popup API
    use({
      "nvim-lua/popup.nvim",
    })

    -- Boost startup time
    use({
      "nathom/filetype.nvim",
      config = function()
        vim.g.did_load_filetypes = 1
      end,
    })

    -- Cursorhold fix
    use({
      "antoinemadec/FixCursorHold.nvim",
      event = "BufRead",
      config = function()
        vim.g.cursorhold_updatetime = 100
      end,
    })

    -- Icons
    use({
      "kyazdani42/nvim-web-devicons",
      config = function()
        require("plugins.icons").config()
      end,
    })

    -- sane config defaults
    use("tpope/vim-sensible")

    -- Focus on code in floating window
    use({
      "hoschi/yode-nvim",
      config = function()
        require("yode-nvim").setup({})
        require("plugins.legendary").yode()
      end,
    })

    -- Better Git diffing
    -- see :h diffview-config for default keybindings
    use({
      "sindrets/diffview.nvim",
      event = "BufRead",
      disable = not if_exe_exists("git"),
      config = function()
        require("plugins.legendary").diffview()
      end,
      requires = "nvim-lua/plenary.nvim",
    })

    -- Show commit info at current line on cursorhold
    use({
      "APZelos/blamer.nvim",
      disable = not if_exe_exists("git"),
      config = function()
        vim.g.blamer_enabled = 1
        vim.g.blamer_delay = 1500
      end,
    })

    -- Generate code documentation
    use({
      "danymat/neogen",
      cmd = "Neogen",
      config = function()
        require("neogen").setup({
          enabled = true,
          jump_map = "<tab>",
        })
      end,
    })

    -- mini plugin with different functions
    use({
      "echasnovski/mini.nvim",
      config = function()
        local indentscope = require("mini.indentscope")
        indentscope.setup({
          ---@diagnostic disable-next-line: missing-parameter -- it's optional
          draw = { animation = indentscope.gen_animation("none") },
          symbol = "Â¦",
        })
      end,
    })

    -- generate git links
    use({
      "ruifm/gitlinker.nvim",
      disable = not if_exe_exists("git"),
      requires = "nvim-lua/plenary.nvim",
      config = function()
        require("gitlinker").setup({})
        require("plugins.legendary").gitlinker()
      end,
    })

    -- scrollbar on the right
    use({
      "lewis6991/satellite.nvim",
      config = function()
        require("satellite").setup()
      end,
    })

    -- reasonable defaults for most search-related vim features
    use({ "wincent/loupe" })

    -- use({
    --   "kevinhwang91/nvim-ufo",
    --   requires = "kevinhwang91/promise-async",
    --   config = function()
    --     -- vim.wo.foldcolumn = "1"
    --     vim.wo.foldlevel = 99 -- feel free to decrease the value
    --     vim.wo.foldmethod = "manual"
    --     vim.wo.foldenable = true
    --     local capabilities = vim.lsp.protocol.make_client_capabilities()
    --     capabilities.textDocument.foldingRange = {
    --       dynamicRegistration = false,
    --       lineFoldingOnly = true,
    --     }

    --     require("ufo").setup()
    --   end,
    -- })

    use({
      "ziontee113/icon-picker.nvim",
      requires = "stevearc/dressing.nvim",
      config = function()
        require("icon-picker")
      end,
    })

    -- more details on code actions
    use({
      "weilbith/nvim-code-action-menu",
      cmd = "CodeActionMenu",
    })

    -- lazygit vim frontend
    use({
      "kdheepak/lazygit.nvim",
      disable = not if_exe_exists("lazygit"),
      config = function()
        require("plugins.legendary").lazygit()
      end,
    })

    -- register interaction, opens with ""
    use("gennaro-tedesco/nvim-peekup")

    -- collection of language packs
    use("sheerun/vim-polyglot")

    -- Search for what's visualized, by *
    use("nelstrom/vim-visual-star-search")

    -- Look up bindings of keys
    use({
      "AckslD/nvim-whichkey-setup.lua",
      requires = { "liuchengxu/vim-which-key" },
      config = function()
        require("plugins.legendary").which_key()
      end,
    })

    -- Smooth scrolling, todo, decrease animation time
    use({
      "karb94/neoscroll.nvim",
      event = "BufRead",
      config = function()
        require("plugins.neoscroll").config()
      end,
    })

    -- Rust support
    use({
      "rust-lang/rust.vim",
      disable = not if_exe_exists("rustc"),
      event = "BufRead",
      config = function()
        vim.g.rustfmt_autosave = 1
      end,
    })

    -- File explorer
    -- todo, may exchange with nvim-neo-tree/neo-tree.nvim
    use({
      "kyazdani42/nvim-tree.lua",
      event = "BufRead",
      config = function()
        require("plugins.tree").config()
      end,
    })

    -- smoothly navigate between splits and panes
    use({
      "numToStr/Navigator.nvim",
      config = function()
        require("Navigator").setup({})
        require("plugins.legendary").navigator()
      end,
    })

    -- nvim http client (curl wrapper)
    use({
      "NTBBloodbath/rest.nvim",
      disable = not if_exe_exists("curl"),
      requires = { "nvim-lua/plenary.nvim" },
      event = "BufEnter",
      config = function()
        require("rest-nvim").setup({
          -- Open request results in a horizontal split
          result_split_horizontal = false,
          -- Skip SSL verification, useful for unknown certificates
          skip_ssl_verification = false,
          -- Highlight request on run
          highlight = {
            enabled = true,
            timeout = 150,
          },
          result = {
            -- toggle showing URL, HTTP info, headers at top the of result window
            show_url = true,
            show_http_info = true,
            show_headers = true,
          },
          -- Jump to request line on run
          jump_to_request = false,
          env_file = ".env",
          custom_dynamic_variables = {},
          yank_dry_run = true,
        })
        require("plugins.legendary").http_rest()
      end,
    })

    -- FZF vim plugin implemented in lua
    use({
      "ibhagwan/fzf-lua",
      disable = not if_exe_exists("fzf"),
      requires = "akinsho/bufferline.nvim",
      config = function()
        require("plugins.fzf").config()
      end,
    })

    -- Completion engine
    use({
      "hrsh7th/nvim-cmp",
      event = "BufRead",
      config = function()
        require("plugins.cmp").config()
      end,
      requires = {
        -- completion for snippets
        {
          "saadparwaiz1/cmp_luasnip",
          requires = {
            -- Snippet engine
            {
              "L3MON4D3/LuaSnip",
              config = function()
                require("luasnip/loaders/from_vscode").lazy_load({
                  paths = {
                    "~/.config/nvim/snippets",
                    "~/.local/share/nvim/site/pack/packer/start/friendly-snippets",
                  },
                })
              end,
              requires = {
                -- Snippet collections
                "rafamadriz/friendly-snippets",
              },
            },
          },
        },
        { "lukas-reineke/cmp-under-comparator" },
        -- completion for buffers
        { "hrsh7th/cmp-buffer" },
        { "hrsh7th/cmp-path" },
        -- Completions for command mode
        { "hrsh7th/cmp-cmdline" },
        { "hrsh7th/cmp-emoji" },
        -- completion for calculations
        { "hrsh7th/cmp-calc" },
        -- completion for neovim lua api
        { "hrsh7th/cmp-nvim-lua" },
        -- better sort completion items that start with one or more underlines
        { "lukas-reineke/cmp-rg" },
        { "lukas-reineke/cmp-under-comparator" },
        {
          "uga-rosa/cmp-dictionary",
          config = function()
            local dictionaries = {
              "~/.config/nvim/spell/english-autocomplete.txt",
              "~/.config/nvim/spell/german-autocomplete.txt",
            }
            require("cmp_dictionary").setup({
              dic = {
                ["markdown"] = dictionaries,
                ["gitcommit"] = dictionaries,
              },
            })
          end,
        },
        {
          -- collection of configurations for built-in language server client
          "neovim/nvim-lspconfig",
          before = "nvim-cmp",
          config = function()
            require("plugins.lsp")
          end,
          requires = {
            -- json,yml, schema definition
            { "b0o/schemastore.nvim", before = "nvim-lspconfig" },
            -- installer for many lsp
            {
              "williamboman/nvim-lsp-installer",
              before = "nvim-lspconfig",
              requires = { "shoukoo/stylua.nvim" },
            },
            -- nvim lua api type_definition
            { "folke/lua-dev.nvim", before = "nvim-lspconfig" }, -- lua vim api completion
            -- completion plugin for lsp
            { "hrsh7th/cmp-nvim-lsp", before = "nvim-lspconfig" },
            -- Inlay Hints for rust-analyzer
            { "nvim-lua/lsp_extensions.nvim", before = "nvim-lspconfig" },
            -- Show function signature when you type
            { "hrsh7th/cmp-nvim-lsp-signature-help", before = "nvim-lspconfig" },
            -- / search completed by nvim-cmp
            { "hrsh7th/cmp-nvim-lsp-document-symbol", before = "nvim-lspconfig" },
            -- ctags completion
            { "quangnguyen30192/cmp-nvim-tags", before = "nvim-lspconfig" },
            {
              -- typescript lsp utilities
              "jose-elias-alvarez/typescript.nvim",
              before = "fzf-lua", -- otherwise FzfLua buffers won't work
              config = function()
                require("plugins.legendary").typescript_lsp()
                require("plugins.lsp.server-settings.typescript-lsp").setup()
              end,
            },
            {
              -- linter which integrates into lsp
              "jose-elias-alvarez/null-ls.nvim",
              requires = { "nvim-lua/plenary.nvim" },
              config = require("plugins.null-ls").config,
            },
            {
              -- add closing pairs () [] ...
              "windwp/nvim-autopairs",
              after = "nvim-cmp",
              config = function()
                require("plugins.autopairs").config()
              end,
            },
            -- zettelkasten with lsp support
            {
              "mickael-menu/zk-nvim",
              disable = not if_exe_exists("zk"),
              after = "nvim-lspconfig",
              config = function()
                require("plugins.zk").config()
                require("plugins.legendary").zk()
              end,
            },
            {
              -- tree like view for symbols using lsp
              "simrat39/symbols-outline.nvim",
              event = "BufRead",
              setup = function()
                require("plugins.symbols-outline").setup()
              end,
            },
            {
              -- LSP enhancement
              "tami5/lspsaga.nvim",
              -- event = "BufRead",
              config = function()
                require("plugins.lsp.lspsaga").config()
                require("plugins.legendary").lspsaga()
              end,
            },
            -- {
            --   "mfussenegger/nvim-dap",
            --   requires = {
            --     {
            --       "suketa/nvim-dap-ruby",
            --       before = "nvim-lspconfig",
            --       config = function()
            --         require("dap-ruby").setup()
            --       end,
            --     },
            --     { "jbyuki/one-small-step-for-vimkind", before = "nvim-lspconfig" },
            --     { "rcarriga/nvim-dap-ui", before = "nvim-lspconfig" },
            --     -- has some helper function to configure dap
            --     { "simrat39/rust-tools.nvim", before = "nvim-lspconfig" },
            --     { "theHamsta/nvim-dap-virtual-text" },
            --   },
            --   before = "nvim-lspconfig",
            --   config = function()
            --     require("plugins.dap").config()
            --   end,
            -- },
          },
        },
      },
    })

    -- window picker
    use({
      "https://gitlab.com/yorickpeterse/nvim-window.git",
      config = function()
        require("nvim-window").setup({
          chars = {
            "h",
            "j",
            "k",
            "l",
            "a",
            "s",
            "d",
            "f",
          },
        })
        require("plugins.legendary").nvim_window()
      end,
      event = "BufRead",
    })

    -- pretty list for showing diagnostics, references, quickfix and location lists
    -- see config & keymaps: https://github.com/folke/trouble.nvim#setup
    use({
      "folke/trouble.nvim",
      event = "BufRead",
      requires = "kyazdani42/nvim-web-devicons",
      config = require("plugins.trouble").config,
    })

    -- Start screen
    use({
      "mhinz/vim-startify",
      config = function()
        require("plugins.startify").config()
      end,
    })

    -- change surroundings
    use({
      "tpope/vim-surround",
      event = "BufRead",
    })

    -- dot repeat command improved
    use({
      "tpope/vim-repeat",
      event = "BufRead",
    })

    -- sugar for the UNIX shell commands
    use("tpope/vim-eunuch")

    -- supported langs: Ruby, Lua, Vimscript, Bash
    use({
      "RRethy/nvim-treesitter-endwise",
      config = function()
        require("nvim-treesitter.configs").setup({
          endwise = {
            enable = true,
          },
        })
      end,
    })

    -- editorconfig support
    use("editorconfig/editorconfig-vim")

    -- stabilize buffer content on window open/close events
    use({
      "luukvbaal/stabilize.nvim",
      config = function()
        require("stabilize").setup()
      end,
    })

    -- nice ui elements like select and input
    use({
      "stevearc/dressing.nvim",
      config = function()
        require("plugins.dressing").config()
      end,
    })

    -- automatically call mkdir -p if path doesn't exist on save
    use("pbrisbin/vim-mkdir")

    -- visualize undo tree
    use({
      "mbbill/undotree",
      command = "UndotreeToggle",
      config = function()
        require("plugins.legendary").undotree()
      end,
    })

    -- Tags generation
    -- use({
    --   "ludovicchabant/vim-gutentags",
    --   disable = not if_exe_exists("ctags"),
    --   event = "BufRead",
    -- })

    -- shows thin vertical lines for indentation
    use({
      "Yggdroot/indentLine",
      event = "BufRead",
      config = function()
        vim.g.indentLine_color_term = 240
      end,
    })

    -- comment plugin
    use({
      "tpope/vim-commentary",
      event = "BufRead",
    })

    -- AutoSave
    use({
      "Pocco81/AutoSave.nvim",
      event = "BufRead",
      config = function()
        require("autosave").setup({
          events = { "FocusLost" },
          execution_message = nil,
          write_all_buffers = true,
        })
      end,
    })

    -- extends vim's % key to language-specific words instead of just single characters.
    use({
      "andymass/vim-matchup",
      event = "BufRead",
    })

    -- Terminal
    use({
      "akinsho/nvim-toggleterm.lua",
      config = function()
        require("plugins.toggleterm").config()
        require("plugins.legendary").toggleterm()
      end,
    })

    -- show param names while typing
    use({
      "lewis6991/spellsitter.nvim",
      event = "BufRead",
      config = function()
        require("spellsitter").setup()
      end,
    })

    -- filetype detection
    use({ "spywhere/detect-language.nvim", event = "BufRead" })

    -- Syntax highlighting
    use({
      "nvim-treesitter/nvim-treesitter",
      event = "BufRead",
      run = ":TSUpdate",
      config = function()
        require("plugins.treesitter").config()
      end,
      requires = {
        {
          -- Parenthesis highlighting
          "p00f/nvim-ts-rainbow",
          after = "nvim-treesitter",
        },
        {
          -- Autoclose tags
          -- todo, autorename seems broken
          "windwp/nvim-ts-autotag",
          -- branch = "main",
          -- before = "nvim-treesitter",
          -- config = function()
          --   require("nvim-ts-autotag").setup()
          -- end,
        },
        {
          -- Context based commenting
          "JoosepAlviste/nvim-ts-context-commentstring",
          after = "nvim-treesitter",
        },
        -- {
        --   -- Refactor utilities, currently doesnt work, try later
        --   "ThePrimeagen/refactoring.nvim",
        --   requires = { "nvim-treesitter", "plenary.nvim"},
        --   config =function()
        --     require('refactoring').setup({})
        --     require("plugins.legendary").refactoring()
        --   end
        -- },
      },
    })

    -- adds indentation guides to all lines
    use({
      "lukas-reineke/indent-blankline.nvim",
      event = "BufRead",
    })

    -- highlights which characters to target for f, F and family.
    use({
      "kepbod/quick-scope",
      config = function()
        vim.g.qs_highlight_on_keys = { "f", "F", "t", "T" }
      end,
    })

    -- Bufferline
    use({
      "akinsho/bufferline.nvim",
      config = function()
        require("plugins.bufferline").config()
      end,
      requires = {
        "titanzero/zephyrium",
        {
          -- lsp bufferline component
          "SmiteshP/nvim-gps",
          after = "nvim-treesitter",
          config = function()
            require("nvim-gps").setup()
          end,
        },
      },
    })

    -- Statusline
    use({
      "nvim-lualine/lualine.nvim",
      after = "bufferline.nvim",
      event = "BufRead",
      config = function()
        require("plugins.lualine").config()
      end,
      requires = "titanzero/zephyrium",
    })

    -- Git status left of line number
    -- see :h gitsigns-mappings for default keybindings
    use({
      "lewis6991/gitsigns.nvim",
      disable = not if_exe_exists("git"),
      event = "BufRead",
      config = function()
        require("plugins.gitsigns").config()
      end,
    })

    -- git wrapper
    use({
      "tpope/vim-fugitive",
      disable = not if_exe_exists("git"),
      config = function()
        require("plugins.legendary").fugitive()
      end,
    })

    -- place, toggle and display marks
    -- keybindings: https://github.com/kshenoy/vim-signature#installation
    use({
      "kshenoy/vim-signature",
      event = "BufRead",
    })

    -- measure start up time
    use("dstein64/vim-startuptime")

    -- Syntax file for i3 config
    use({ "mboughaba/i3config.vim", event = "BufRead", ft = "i3config", disable = not if_exe_exists("i3") })

    -- Latex autocompile
    use({ "donRaphaco/neotex", ft = "tex" })

    -- reveal the hidden message from Git under the cursor quickly
    use({
      "rhysd/git-messenger.vim",
      disable = not if_exe_exists("git"),
      event = "BufRead",
      config = function()
        vim.g.git_messenger_floating_win_opts = { border = vim.g.floating_window_border_dark }
        require("plugins.legendary").git_messenger()
      end,
    })

    -- asynchronously displaying the colours in the file
    use({
      "rrethy/vim-hexokinase",
      disable = not if_exe_exists("go"),
      run = "make hexokinase",
      event = "BufRead",
      config = function()
        vim.g.Hexokinase_optInPatterns = "full_hex,rgb,rgba,hsl,hsla"
      end,
    })

    -- dims your inactive windows, making it easier to see the active window at a glance
    -- BUG: does not work well with git-messenger
    -- use({
    --   "sunjon/shade.nvim",
    --   event = "BufRead",
    --   config = function()
    --     require("shade").setup({
    --       overlay_opacity = 70,
    --     })
    --   end,
    -- })

    -- camel case is one word
    use("bkad/camelcasemotion")

    -- align text
    use({
      "godlygeek/tabular",
      event = "BufRead",
      config = function()
        require("plugins.legendary").tabular()
      end,
      after = "legendary.nvim",
    })

    -- highlights words under cursor
    use({
      "yamatsum/nvim-cursorline",
      branch = "main",
      config = function()
        require("nvim-cursorline").setup({})
      end,
    })

    -- line joining and splitting
    use({
      "AndrewRadev/splitjoin.vim",
    })

    -- motion plugin
    use({
      "ggandor/leap.nvim",
      event = "BufRead",
      config = function()
        require("leap").set_default_keymaps()
      end,
    })

    -- horizontal highlights for text filetypes like markdown, rmd, vimwiki and orgmode.
    use({
      "lukas-reineke/headlines.nvim",
      event = "BufRead",
      config = function()
        require("headlines").setup()
      end,
    })

    -- markdown helper
    -- <C-Space> - create and toggle checkboxes
    -- <C-k> - create link from selection
    -- <C-b> - bold visual selection
    use({ "walterl/downtools", ft = "markdown" })

    -- markdown set of functions and and mappings to those functions
    -- which make it easy to navigate and manipulate markdown notebooks/journals/wikis
    -- https://github.com/jakewvincent/mkdnflow.nvim#-commands-and-default-mappings
    -- use({
    --   "jakewvincent/mkdnflow.nvim",
    --   event = "BufRead",
    --   config = function()
    --     vim.o.autowriteall = true
    --     require("mkdnflow").setup({})
    --   end,
    -- })

    -- convert markdown using pandoc
    use({
      "jghauser/auto-pandoc.nvim",
      requires = "nvim-lua/plenary.nvim",
      disable = not if_exe_exists("pandoc"),
      event = "BufRead",
      config = function()
        require("auto-pandoc")
        require("plugins.legendary").auto_pandoc()
      end,
    })

    -- paste image from clipboard in markdown
    use({
      "ekickx/clipboard-image.nvim",
      event = "BufRead",
      config = function()
        require("clipboard-image").setup({
          default = {
            img_dir = os.getenv("ZK_NOTEBOOK_DIR") .. "/media/imgs",
            img_name = function()
              return os.date("%Y-%m-%d-%H-%M-%S")
            end,
          },
        })
      end,
    })

    -- markdown in vim float window rendering
    use({
      "ellisonleao/glow.nvim",
      event = "BufRead",
      config = function()
        require("plugins.legendary").glow()
      end,
    })

    -- markdown in browser rendering
    use({ "iamcco/markdown-preview.nvim", event = "BufRead", run = "cd app && yarn install" })

    -- AnsiEsc Command
    use({ "powerman/vim-plugin-AnsiEsc", command = "AnsiEsc" })

    -- writing support
    use({
      "Pocco81/AbbrevMan.nvim",
      -- event = "BufRead",
      config = function()
        local abbrev_man = require("abbrev-man")

        abbrev_man.setup({
          load_natural_dictionaries_at_startup = true,
          natural_dictionaries = {
            ["nt_en"] = {},
            ["nt_de"] = require("plugins.abbrev").german_vowel_dict,
          },
        })
      end,
    })

    -- dark neovim colorscheme
    use({
      "titanzero/zephyrium",
      config = function()
        require("zephyrium")
        vim.cmd([[
          hi LineNr guifg=#969896
        ]])
      end,
    })

    -- make Neovim's quickfix window better
    use({
      "romainl/vim-qf",
      config = function()
        vim.g.qf_nowrap = false
        vim.g.qf_max_height = 20
      end,
      requires = {
        {
          "kevinhwang91/nvim-bqf",
          config = function()
            require("bqf").setup({
              preview = {
                delay_syntax = 0,
              },
            })
          end,
        },
        {
          "https://gitlab.com/yorickpeterse/nvim-pqf.git",
          config = function()
            require("pqf").setup({
              signs = {
                error = "ï",
                warning = "ïª",
                info = "ï",
                hint = "ï",
              },
            })
          end,
        },
      },
    })

    -- throws error cause of python dependency, todo
    -- use {'gelguy/wilder.nvim',
    --   config = function ()
    --     require('wilder').setup({
    --       modes = { ':' },
    --       use_python_remote_plugin = 0,
    --     })
    --   end,
    -- }

    -- use "vim-scripts/CmdlineComplete"

    -- replaces asteriks with bullets
    -- use {
    --   "akinsho/org-bullets.nvim",
    --   config = function()
    --     require("org-bullets").setup {}
    --   end,
    -- }

    -- todo, look into
    -- use {
    --   "nvim-neorg/neorg",
    --   config = function()
    --   end
    -- }

    -- is for telescope only (yet)
    -- use {'ahmedkhalf/project.nvim',
    --   config = function ()
    --     require("nvim-tree").setup({})
    --   end,
    -- }

    -- winresizer - window resize mode by `Ctrl+I`
    -- use {
    -- "simeji/winresizer",
    --   config = function()
    --     vim.g.winresizer_start_key = '<C-I>'
    --   end,
    -- }

    -- auto saves and loads vim sessions
    -- use({
    --   "rmagatti/auto-session",
    --   config = function()
    --     require("auto-session").setup({
    --       auto_session_enable_last_session = false,
    --       log_level = "error",
    --     })
    --   end,
    -- })

    -- todo, doesnt work
    -- use({
    --   "folke/todo-comments.nvim",
    --   requires = "nvim-lua/plenary.nvim",
    --   event = "BufReadPost",
    --   config = require("plugins.todo").config,
    -- })
  end,
  config = {
    display = {
      open_fn = require("packer.util").float,
    },
    compile_on_sync = true,
  },
})

return M
