-- vi: ft=lua

local M = {}

function M.config()
  -- Define this minimal config so that it's available if telescope is not yet available.
  local status_ok, telescope = pcall(require, "telescope")
  if not status_ok then
    return
  end

  local previewers = require("telescope.previewers")
  local sorters = require("telescope.sorters")
  local actions = require("telescope.actions")
  -- local trouble = require("trouble.providers.telescope")

  telescope.setup({
    defaults = {
      prompt_prefix = " ",
      selection_caret = " ",
      entry_prefix = "  ",
      initial_mode = "insert",
      selection_strategy = "reset",
      sorting_strategy = "descending",
      layout_strategy = "horizontal",
      layout_config = {
        width = 0.75,
        preview_cutoff = 120,
        horizontal = {
          preview_width = function(_, cols, _)
            if cols < 120 then
              return math.floor(cols * 0.5)
            end
            return math.floor(cols * 0.6)
          end,
          mirror = false,
        },
        vertical = { mirror = false },
      },
      vimgrep_arguments = {
        "rg",
        "--color=never",
        "--no-heading",
        "--with-filename",
        "--line-number",
        "--column",
        "--smart-case",
        "--hidden",
        "--glob=!.git/",
      },
      mappings = {
        i = {
          ["<C-j>"] = actions.move_selection_next,
          ["<C-k>"] = actions.move_selection_previous,
          ["<ESC>"] = actions.close,
          -- ["<C-t>"] = trouble.open_with_trouble,
          ["<C-n>"] = actions.cycle_history_next,
          ["<C-p>"] = actions.cycle_history_prev,
          ["<C-q>"] = actions.smart_send_to_qflist + actions.open_qflist,
          ["<CR>"] = actions.select_default,
        },
        n = {
          ["<C-n>"] = actions.move_selection_next,
          -- ["<C-t>"] = trouble.open_with_trouble,
          ["<C-p>"] = actions.move_selection_previous,
          ["<C-q>"] = actions.smart_send_to_qflist + actions.open_qflist,
        },
      },
      file_ignore_patterns = {},
      path_display = { shorten = 5 },
      winblend = 0,
      border = {},
      borderchars = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
      color_devicons = true,
      set_env = { ["COLORTERM"] = "truecolor" }, -- default = nil,
    },
    pickers = {
      find_files = {
        hidden = true,
      },
      live_grep = {
        --@usage don't include the filename in the search results
        only_sort_text = true,
      },
    },
    extensions = {
      fzf = {
        fuzzy = true, -- false will only do exact matching
        override_generic_sorter = true, -- override the generic sorter
        override_file_sorter = true, -- override the file sorter
        case_mode = "smart_case", -- or "ignore_case" or "respect_case"
      },
      frecency = {
        ignore_patterns = { "*.git/*", "*/tmp/*" },
        workspaces = {
          ["conf"] = "/home/armin/.dotfiles",
          -- ["data"] = "/home/my_username/.local/share",
          -- ["project"] = "/home/my_username/projects",
          -- ["wiki"] = "/home/my_username/wiki",
        },
      },
      project = {
        base_dirs = {
          "~/Workspace",
          "~/tempy",
          "~/.dotfiles",
        },
        hidden_files = true, -- default: false
        -- theme = "dropdown",
      },
    },
    file_previewer = previewers.vim_buffer_cat.new,
    grep_previewer = previewers.vim_buffer_vimgrep.new,
    qflist_previewer = previewers.vim_buffer_qflist.new,
    file_sorter = sorters.get_fuzzy_file,
    generic_sorter = sorters.get_generic_fuzzy_sorter,
  })
  telescope.load_extension("fzf")
  telescope.load_extension("yank_history")
  telescope.load_extension("project")
  telescope.load_extension("node_modules")
  telescope.load_extension("heading")
  telescope.load_extension("conventional_commits")
  telescope.load_extension("luasnip")
  telescope.load_extension("changes")
  -- no shortcuts yet
  telescope.load_extension("notify")
  telescope.load_extension("packer")
  telescope.load_extension("lazygit")
  telescope.load_extension("env")
end

return M
