-- vi: ft=lua

local function run(use)
  use 'hrsh7th/nvim-cmp' -- Autocompletion plugin
  use 'L3MON4D3/LuaSnip' -- Snippets plugin
  use 'saadparwaiz1/cmp_luasnip' -- Snippets source for nvim-cmp
  use 'rafamadriz/friendly-snippets' -- Snippets collection

  use 'hrsh7th/cmp-buffer'
  use 'hrsh7th/cmp-path'
  use 'hrsh7th/cmp-cmdline'
  use 'hrsh7th/cmp-emoji'
  use 'hrsh7th/cmp-calc'
  use 'hrsh7th/cmp-nvim-lua'
  -- use 'hrsh7th/cmp-nvim-lsp-document-symbol'

  -- better completion kind
  use "onsails/lspkind-nvim"

  vim.o.completeopt = 'menuone,noselect'

  local has_words_before = function()
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  end

  -- luasnip setup
  -- local luasnip = require 'luasnip'
  local luasnip = require("luasnip/loaders/from_vscode").lazy_load({ paths = { "~/.config/nvim/own-snippets", "~/.local/share/nvim/site/pack/packer/start/friendly-snippets" } })

  -- lspkind
  local lspkind = require "lspkind"
  lspkind.init {
    with_text = true,
    symbol_map = {
      Text = "",
      Method = "ƒ",
      Function = "ﬦ",
      Constructor = "",
      Variable = "",
      Class = "",
      Interface = "ﰮ",
      Module = "",
      Property = "",
      Unit = "",
      Value = "",
      Enum = "了",
      Keyword = "",
      Snippet = "﬌",
      Color = "",
      File = "",
      Folder = "",
      EnumMember = "",
      Constant = "",
      Struct = "",
    },
  }

  -- nvim-cmp setup
  local cmp = require 'cmp'
  cmp.setup({
    snippet = {
      expand = function(args)
        require('luasnip').lsp_expand(args.body)
      end,
    },
    mapping = {
      ['<C-k>'] = cmp.mapping.select_prev_item(),
      ['<C-j>'] = cmp.mapping.select_next_item(),
      ['<C-f>'] = cmp.mapping.scroll_docs(-4),
      ['<C-b>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      -- ['<ESC>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      },
      ["<Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif has_words_before() then
          if luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
          else
            cmp.complete()
          end
        else
          fallback()
        end
      end, { "i", "s" }),

      ["<S-Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.jumpable(-1) then
          luasnip.jump(-1)
        else
          fallback()
        end
      end, { "i", "s" }),
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'path' },
      { name = 'cmdline' },
      { name = 'nvim_lua' },
      { name = 'nvim_lsp_document_symbol' },
      { name = 'buffer' },
      { name = 'luasnip' },
      { name = 'emoji' },
      { name = 'calc' },
    },
    formatting = {
      format = function(entry, vim_item)
        vim_item.kind = string.format("%s %s", lspkind.presets.default[vim_item.kind], vim_item.kind)
        vim_item.menu = ({
          nvim_lsp = "ﲳ",
          nvim_lua = "",
          treesitter = "",
          path = "ﱮ",
          buffer = "﬘",
          zsh = "",
          vsnip = "",
          spell = "暈",
        })[entry.source.name]

        return vim_item
      end,
    },
  })
end

return { run = run}
