-- vi: ft=lua

local M = {}

local truncatingLabel = function(label)
	local ELLIPSIS_CHAR = "…"
	local MAX_LABEL_WIDTH = 36
	local truncated_label = vim.fn.strcharpart(label, 0, MAX_LABEL_WIDTH)
	if truncated_label ~= label then
		return truncated_label .. ELLIPSIS_CHAR
	else
		return label
	end
end

function M.config()
	local cmp_status_ok, cmp = pcall(require, "cmp")
	if not cmp_status_ok then
		return
	end

	local luasnip_status_ok, luasnip = pcall(require, "luasnip")
	if not luasnip_status_ok then
		return
	end

	vim.o.completeopt = "menuone,noselect"

	local has_words_before = function()
		local line, col = unpack(vim.api.nvim_win_get_cursor(0))
		return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
	end

	local kind_icons = {
		Text = "",
		Method = "",
		Function = "",
		Constructor = "",
		Field = "ﰠ",
		Variable = "",
		Class = "",
		Interface = "",
		Module = "",
		Property = "",
		Unit = "",
		Value = "",
		Enum = "",
		Keyword = "",
		Snippet = "",
		Color = "",
		File = "",
		Reference = "",
		Folder = "",
		EnumMember = "",
		Constant = "",
		Struct = "פּ",
		Event = "",
		Operator = "",
		TypeParameter = "",
	}

	-- nvim-cmp setup
	cmp.setup({
		snippet = {
			expand = function(args)
				luasnip.lsp_expand(args.body)
			end,
		},
		experimental = {
			ghost_text = false,
			native_menu = false,
		},
		completion = {
			keyword_length = 1,
		},
		duplicates = {
			nvim_lsp = 1,
			luasnip = 1,
			cmp_tabnine = 1,
			buffer = 1,
			path = 1,
		},
		mapping = {
			["<C-k>"] = cmp.mapping.select_prev_item(),
			["<C-j>"] = cmp.mapping.select_next_item(),
			["<C-f>"] = cmp.mapping.scroll_docs(-4),
			["<C-b>"] = cmp.mapping.scroll_docs(4),
			["<C-Space>"] = cmp.mapping.complete(),
			-- ['<ESC>'] = cmp.mapping.abort(),
			["<CR>"] = cmp.mapping.confirm({
				behavior = cmp.ConfirmBehavior.Replace,
				-- select = true,
			}),
			["<Tab>"] = cmp.mapping(function(fallback)
				if cmp.visible() then
					cmp.select_next_item()
				elseif has_words_before() then
					if luasnip.expand_or_jumpable() then
						luasnip.expand_or_jump()
					else
						cmp.complete()
					end
				else
					fallback()
				end
			end, { "i", "c" }),

			["<S-Tab>"] = cmp.mapping(function(fallback)
				if cmp.visible() then
					cmp.select_prev_item()
				elseif luasnip.jumpable(-1) then
					luasnip.jump(-1)
				else
					fallback()
				end
			end, { "i", "c" }),
		},
		sources = {
			{ name = "nvim_lsp" },
			{ name = "nvim_lsp_signature_help" },
			{ name = "path" },
			{ name = "nvim_lua" },
			{ name = "tags" },
			{
				name = "buffer",
				opts = {
					get_bufnrs = function()
						return vim.api.nvim_list_bufs()
					end,
				},
			},
			{ name = "luasnip" },
			{ name = "rg", max_item_count = 4, keyword_length = 4 },
			{ name = "emoji" },
			{ name = "calc" },
			{ name = "npm", keyword_length = 4 },
		},
		formatting = {
			format = function(entry, vim_item)
				vim_item.kind = string.format("%s", kind_icons[vim_item.kind])
				vim_item.menu = ({
					nvim_lsp = "ﲳ",
					nvim_lua = "",
					treesitter = "",
					path = "ﱮ",
					buffer = "﬘",
					zsh = "",
					vsnip = "",
					spell = "暈",
				})[entry.source.name]

				vim_item.abbr = truncatingLabel(vim_item.abbr)

				return vim_item
			end,
		},
	})

	cmp.setup.filetype("markdown", {
		sources = cmp.config.sources({
			{ name = "dictionary" },
		}),
	})

	cmp.setup.cmdline("/", {
		sources = cmp.config.sources({
			{ name = "nvim_lsp_document_symbol" },
			{ name = "buffer" },
		}),
	})

	cmp.setup.cmdline(":", {
		sources = {
			{ name = "cmdline", keyword_length = 2 },
		},
	})
end

return M
