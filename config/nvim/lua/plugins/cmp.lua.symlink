-- vi: ft=lua

return {
	"hrsh7th/nvim-cmp",
	event = "InsertEnter",
	---@param opts cmp.ConfigSchema
	opts = function(opts)
		local cmp = require("cmp")
		local bufferCmpConfig = {
			name = "buffer",
			option = {
				get_bufnrs = function()
					local bufs = {}
					for _, buf in ipairs(vim.api.nvim_list_bufs()) do
						local byte_size = vim.api.nvim_buf_get_offset(buf, vim.api.nvim_buf_line_count(buf))
						if byte_size > 1024 * 1024 then -- 1 Megabyte max
							bufs[buf] = false
						else
							bufs[buf] = true
						end
					end
					return vim.tbl_keys(bufs)
				end,
			},
			priority = 100,
			keyword_length = 5,
		}

		local sources = {
			{ name = "nvim_lsp", priority = 100 },
			{ name = "nvim_lsp_signature_help", priority = 90 },
			{ name = "luasnip" },
			bufferCmpConfig,
			{ name = "path" },
			{
				option = {
					get_bufnrs = function()
						return vim.api.nvim_list_bufs()
					end,
				},
			},
			{ name = "nvim_lua" },
			{ name = "emoji" },
			{ name = "calc" },
			{ name = "git" },
		}

		local writing_sources = {
			{ name = "dictionary", keyword_length = 1 },
			bufferCmpConfig,
			{ name = "nvim_lsp" },
			{ name = "emoji" },
			{ name = "calc" },
			{ name = "git" },
		}
		cmp.setup.filetype("gitcommit", {
			sources = writing_sources,
		})

		cmp.setup.filetype("markdown", {
			sources = writing_sources,
		})

		cmp.setup.cmdline("/", {
			sources = cmp.config.sources({
				{ name = "nvim_lsp_document_symbol" },
				{ name = "buffer", keyword_length = 0 },
			}),
		})

		cmp.setup.cmdline(":", {
			sources = {
				{ name = "cmdline", keyword_length = 0 },
			},
		})

		cmp.setup.filetype({ "dap-repl", "dapui_watches", "dapui_hover" }, {
			sources = {
				{ name = "dap" },
			},
		})

		opts.sources = cmp.config.sources(vim.list_extend(opts.sources or {}, sources))
	end,
	dependencies = {
		"hrsh7th/cmp-nvim-lsp",
		"hrsh7th/cmp-buffer",
		"hrsh7th/cmp-path",
		-- "hrsh7th/cmp-nvim-lsp-signature-help",
		-- Completions for command mode
		"hrsh7th/cmp-cmdline",
		"hrsh7th/cmp-emoji",
		-- completion for calculations
		"hrsh7th/cmp-calc",
		-- completion for neovim lua api
		"hrsh7th/cmp-nvim-lua",
		-- better sort completion items that start with one or more underlines
		"lukas-reineke/cmp-rg",
		"petertriho/cmp-git",
		{
			"uga-rosa/cmp-dictionary",
			config = function()
				local dict = require("cmp_dictionary")
				dict.setup({
					first_case_insensitive = true,
				})
				dict.switcher({
					filetype = {
						lua = "~/.config/nvim/spell/lua.dict",
						typescript = { "~/.config/nvim/spell/typescript.dict", "~/.config/nvim/spell/javascript.dict" },
						javascript = "~/.config/nvim/spell/javascript.dict",
						ruby = "~/.config/nvim/spell/ruby.dict",
					},
					spelllang = {
						en = "~/.config/nvim/spell/english.dict",
						de = "~/.config/nvim/spell/german.dict",
					},
				})
			end,
		},
		{
			"saadparwaiz1/cmp_luasnip",
			dependencies = {
				-- Snippet engine
				{
					"L3MON4D3/LuaSnip",
					config = function(_, opts)
						require("luasnip").config.set_config(opts)

						require("luasnip/loaders/from_vscode").lazy_load({
							-- todo, check if paths exist
							paths = {
								"~/.config/nvim/snippets",
								"~/.local/share/nvim/lazy/friendly-snippets",
							},
						})
					end,
					dependencies = {
						-- Snippet collections
						"rafamadriz/friendly-snippets",
					},
				},
			},
		},
	},
}
