-- vi: ft=lua

local M = {}

-- label adjustments to guarantee max-width
local ELLIPSIS_CHAR = "…"
local MAX_LABEL_WIDTH = 36
local truncating_label = function(label)
  local truncated_label = vim.fn.strcharpart(label, 0, MAX_LABEL_WIDTH)
  if truncated_label ~= label then
    return truncated_label .. ELLIPSIS_CHAR
  else
    return label
  end
end

function M.config()
  local cmp_status_ok, cmp = pcall(require, "cmp")
  if not cmp_status_ok then
    return
  end

  local luasnip_status_ok, luasnip = pcall(require, "luasnip")
  if not luasnip_status_ok then
    return
  end

  luasnip.config.set_config({
    history = true,
    updateevents = "TextChanged,TextChangedI",
  })

  vim.o.completeopt = "menuone,noselect"

  local has_words_before = function()
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  end

  local sources = {
    { name = "nvim_lsp", max_item_count = 20, priority_weight = 110 },
    { name = "nvim_lsp_signature_help", priority_weight = 100 },
    {
      name = "buffer",
      -- max_item_count = 12,
      priority_weight = 90,
      option = {
        get_bufnrs = function()
          return vim.api.nvim_list_bufs()
        end,
      },
    },
    { name = "nvim_lua", priority_weight = 80 },
    { name = "luasnip", priority_weight = 70 },
    { name = "path", priority_weight = 60 },
    { name = "tags", priority_weight = 50, keyword_length = 4 },
    {
      name = "rg",
      keyword_length = 5,
      max_item_count = 5,
      priority_weight = 40,
      option = {
        additional_arguments = "--smart-case --hidden",
      },
    },
    { name = "emoji" },
    { name = "calc" },
    { name = "git" },
  }

  local writing_sources = cmp.config.sources(vim.tbl_extend("force", sources, {
    { name = "dictionary", priority_weight = 65 },
  }))

  local kind_icons = {
    Text = "",
    Method = "",
    Function = "",
    Constructor = "",
    Field = "ﰠ",
    Variable = "",
    Class = "",
    Interface = "",
    Module = "",
    Property = "",
    Unit = "",
    Value = "",
    Enum = "",
    Keyword = "",
    Snippet = "",
    Color = "",
    File = "",
    Reference = "",
    Folder = "",
    EnumMember = "",
    Constant = "",
    Struct = "פּ",
    Event = "",
    Operator = "",
    TypeParameter = "",
  }

  -- nvim-cmp setup
  cmp.setup({
    snippet = {
      expand = function(args)
        luasnip.lsp_expand(args.body)
      end,
    },

    experimental = {
      ghost_text = true,
      native_menu = false,
    },

    completion = {
      keyword_length = 1,
    },

    duplicates = {
      nvim_lsp = 1,
      luasnip = 1,
      cmp_tabnine = 1,
      buffer = 1,
      path = 1,
    },

    mapping = {
      ["<C-k>"] = cmp.mapping.select_prev_item(),
      ["<C-j>"] = cmp.mapping.select_next_item(),
      ["<C-f>"] = cmp.mapping.scroll_docs(-4),
      ["<C-b>"] = cmp.mapping.scroll_docs(4),
      ["<C-Space>"] = cmp.mapping.complete(),
      -- ['<ESC>'] = cmp.mapping.abort(),
      ["<CR>"] = cmp.mapping.confirm({
        behavior = cmp.ConfirmBehavior.Replace,
        -- select = true,
      }),
      ["<Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif has_words_before() then
          if luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
          else
            cmp.complete()
          end
        else
          fallback()
        end
      end, { "i", "c" }),

      ["<S-Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.jumpable(-1) then
          luasnip.jump(-1)
        else
          fallback()
        end
      end, { "i", "c" }),
    },

    sources = sources,

    -- sorting = {
    --  priority_weight = 100,
    --  comparators = {
    --    cmp.config.compare.offset,
    --    cmp.config.compare.exact,
    --    cmp.config.compare.score,
    --    require("cmp-under-comparator").under,
    --    cmp.config.compare.sort_text,
    --    cmp.config.compare.length,
    --    cmp.config.compare.order,
    --  },
    -- },

    formatting = {
      format = function(entry, vim_item)
        vim_item.kind = string.format("%s", kind_icons[vim_item.kind])
        vim_item.menu = ({
          nvim_lsp = "ﲳ",
          nvim_lua = "",
          treesitter = "",
          path = "ﱮ",
          buffer = "﬘",
          zsh = "",
          vsnip = "",
          spell = "暈",
        })[entry.source.name]

        vim_item.abbr = truncating_label(vim_item.abbr)

        return vim_item
      end,
    },

    window = {
      documentation = {
        border = vim.g.floating_window_border_dark,
      },
      -- completion = {
      --   border = vim.g.floating_window_border_dark,
      -- },
    },
  })

  cmp.setup.filetype("gitcommit", {
    sources = writing_sources,
  })

  cmp.setup.filetype("markdown", {
    sources = writing_sources,
  })

  cmp.setup.cmdline("/", {
    sources = cmp.config.sources({
      { name = "nvim_lsp_document_symbol" },
      { name = "buffer", keyword_length = 0 },
    }),
  })

  cmp.setup.cmdline(":", {
    sources = {
      { name = "cmdline", keyword_length = 0 },
    },
  })
end

return M
