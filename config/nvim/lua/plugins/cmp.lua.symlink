-- vi: ft=lua

return {
	"hrsh7th/nvim-cmp",
	event = "InsertEnter",
	---@param opts cmp.ConfigSchema
	opts = function(_, opts)
		local cmp = require("cmp")
		local bufferCmpConfig = {
			name = "buffer",
			option = {
				get_bufnrs = function()
					local bufs = {}
					for _, buf in ipairs(vim.api.nvim_list_bufs()) do
						local byte_size = vim.api.nvim_buf_get_offset(buf, vim.api.nvim_buf_line_count(buf))
						if byte_size > 524288 then -- 1/2 Megabyte max
							bufs[buf] = false
						else
							bufs[buf] = true
						end
					end
					return vim.tbl_keys(bufs)
				end,
			},
			keyword_length = 4,
		}

		local sources = {
			{ name = "nvim_lsp", priority = 100 },
			{ name = "nvim_lsp_signature_help", priority = 90 },
			bufferCmpConfig,
			{ name = "path" },
			{ name = "nvim_lua" },
			{ name = "emoji" },
			{ name = "calc" },
			{ name = "git" },
			-- {
			-- 	option = {
			-- 		get_bufnrs = function()
			-- 			return vim.api.nvim_list_bufs()
			-- 		end,
			-- 	},
			-- },
		}

		local writing_sources = {
			{ name = "dictionary", keyword_length = 1 },
			bufferCmpConfig,
			{ name = "nvim_lsp" },
			{ name = "emoji" },
			{ name = "calc" },
			{ name = "git" },
		}
		cmp.setup.filetype("gitcommit", {
			sources = writing_sources,
		})

		cmp.setup.filetype("markdown", {
			sources = writing_sources,
		})

		cmp.setup.cmdline("/", {
			sources = cmp.config.sources({
				{ name = "nvim_lsp_document_symbol" },
				{ name = "buffer", keyword_length = 0 },
			}),
		})

		cmp.setup.cmdline(":", {
			sources = {
				{ name = "cmdline", keyword_length = 0 },
			},
		})

		cmp.setup.filetype({ "dap-repl", "dapui_watches", "dapui_hover" }, {
			sources = {
				{ name = "dap" },
			},
		})

		opts.sources = cmp.config.sources(vim.list_extend(opts.sources or {}, sources))
	end,
	dependencies = {
		"hrsh7th/cmp-nvim-lsp",
		"hrsh7th/cmp-buffer",
		"hrsh7th/cmp-path",
		-- "hrsh7th/cmp-nvim-lsp-signature-help",
		"hrsh7th/cmp-cmdline", -- Completions for command mode
		"hrsh7th/cmp-emoji",
		"hrsh7th/cmp-calc", -- completion for calculations
		"hrsh7th/cmp-nvim-lua", -- completion for neovim lua api
		"petertriho/cmp-git",
		-- {
		-- 	"uga-rosa/cmp-dictionary",
		-- 	-- todo, migrate to v3
		-- 	tag = "v2.2.0",
		-- 	config = function()
		-- 		local dict = require("cmp_dictionary")
		-- 		dict.setup({
		-- 			first_case_insensitive = true,
		-- 		})
		-- 		dict.switcher({
		-- 			filetype = {
		-- 				lua = "~/.config/nvim/spell/lua.dict",
		-- 				typescript = { "~/.config/nvim/spell/typescript.dict", "~/.config/nvim/spell/javascript.dict" },
		-- 				javascript = "~/.config/nvim/spell/javascript.dict",
		-- 				ruby = "~/.config/nvim/spell/ruby.dict",
		-- 			},
		-- 			spelllang = {
		-- 				en = "~/.config/nvim/spell/english.dict",
		-- 				de = "~/.config/nvim/spell/german.dict",
		-- 			},
		-- 		})
		-- 	end,
		-- },
	},

	{
		"L3MON4D3/LuaSnip",
		build = (not jit.os:find("Windows"))
				and "echo 'NOTE: jsregexp is optional, so not a big deal if it fails to build'; make install_jsregexp"
			or nil,
		dependencies = {
			{
				"rafamadriz/friendly-snippets",
				config = function()
					local paths = { "~/.local/share/nvim/lazy/friendly-snippets" }
					local custom_snippets_dir = "~/.dotfiles/config/nvim/snippets"

					if vim.fn.isdirectory(custom_snippets_dir) == 0 then
						table.insert(paths, custom_snippets_dir)
					end

					require("luasnip.loaders.from_vscode").lazy_load({ paths = paths })
				end,
			},
		},
		opts = {
			history = true,
			delete_check_events = "TextChanged",
		},
	},
}
