-- vi: ft=lua
local bufferCmpConfig = {
	name = "buffer",
	option = {
		get_bufnrs = function()
			local bufs = {}
			for _, buf in ipairs(vim.api.nvim_list_bufs()) do
				local byte_size = vim.api.nvim_buf_get_offset(buf, vim.api.nvim_buf_line_count(buf))
				if byte_size > 524288 then -- 1/2 Megabyte max
					bufs[buf] = false
				else
					bufs[buf] = true
				end
			end
			return vim.tbl_keys(bufs)
		end,
	},
	keyword_length = 4,
}

return {
	{
		"hrsh7th/nvim-cmp",
		event = "InsertEnter",
		---@param opts cmp.ConfigSchema
		opts = function(_, opts)
			local cmp = require("cmp")

			local sources = {
				{ name = "nvim_lsp_signature_help", priority = 90 },
				bufferCmpConfig,
				{ name = "nvim_lua" },
				{ name = "emoji" },
				{ name = "calc" },
				{ name = "dotenv" },
			}

			local writing_sources = {
				{ name = "dictionary", keyword_length = 1 },
				bufferCmpConfig,
				{ name = "nvim_lsp" },
				{ name = "emoji" },
				{ name = "calc" },
				{ name = "spell" },
			}

			cmp.setup.filetype({ "dap-repl", "dapui_watches", "dapui_hover" }, {
				sources = cmp.config.sources({
					{ name = "dap" },
				}),
			})

			-- Set configuration for specific filetype.
			cmp.setup.filetype({ "gitcommit", "markdown" }, {
				sources = cmp.config.sources({
					writing_sources,
				}, {
					{ name = "buffer" },
				}),
			})

			-- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
			cmp.setup.cmdline({ "/", "?" }, {
				mapping = cmp.mapping.preset.cmdline(),
				sources = {
					{ name = "buffer" },
					{ name = "nvim_lsp_document_symbol" },
				},
			})

			-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
			cmp.setup.cmdline(":", {
				matching = { disallow_symbol_nonprefix_matching = false },
				mapping = cmp.mapping.preset.cmdline(),
				sources = cmp.config.sources({
					{ name = "path" },
				}, {
					{
						name = "cmdline",
						option = {
							ignore_cmds = { "Man", "!" },
						},
					},
					{ name = "cmdline_history" },
				}),
			})

			opts.sources = cmp.config.sources(vim.list_extend(sources, opts.sources or {}))
		end,
		dependencies = {
			"hrsh7th/cmp-buffer",
			"hrsh7th/cmp-nvim-lsp-signature-help",
			"hrsh7th/cmp-nvim-lsp-document-symbol",
			"hrsh7th/cmp-cmdline", -- Completions for command mode
			"dmitmel/cmp-cmdline-history",
			"hrsh7th/cmp-emoji",
			"hrsh7th/cmp-calc", -- completion for calculations
			"hrsh7th/cmp-nvim-lua", -- completion for neovim lua api
			"f3fora/cmp-spell",
			"SergioRibera/cmp-dotenv",
			-- {
			-- 	"uga-rosa/cmp-dictionary",
			-- 	-- todo, migrate to v3
			-- 	tag = "v2.2.0",
			-- 	config = function()
			-- 		local dict = require("cmp_dictionary")
			-- 		dict.setup({
			-- 			first_case_insensitive = true,
			-- 		})
			-- 		dict.switcher({
			-- 			filetype = {
			-- 				lua = "~/.config/nvim/spell/lua.dict",
			-- 				typescript = { "~/.config/nvim/spell/typescript.dict", "~/.config/nvim/spell/javascript.dict" },
			-- 				javascript = "~/.config/nvim/spell/javascript.dict",
			-- 			},
			-- 			spelllang = {
			-- 				en = "~/.config/nvim/spell/english.dict",
			-- 				de = "~/.config/nvim/spell/german.dict",
			-- 			},
			-- 		})
			-- 	end,
			-- },
		},
	},
	{
		"L3MON4D3/LuaSnip",
		build = (not jit.os:find("Windows"))
				and "echo 'NOTE: jsregexp is optional, so not a big deal if it fails to build'; make install_jsregexp"
			or nil,
		dependencies = {
			{
				"rafamadriz/friendly-snippets",
				config = function()
					local paths = { "~/.local/share/nvim/lazy/friendly-snippets" }
					local custom_snippets_dir = "~/.dotfiles/config/nvim/snippets"

					if vim.fn.isdirectory(custom_snippets_dir) == 0 then
						table.insert(paths, custom_snippets_dir)
					end

					require("luasnip.loaders.from_vscode").lazy_load({ paths = paths })
				end,
			},
		},
		opts = {
			history = true,
			delete_check_events = "TextChanged",
		},
	},
}
