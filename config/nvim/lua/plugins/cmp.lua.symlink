-- vi: ft=lua

return {
  "hrsh7th/nvim-cmp",
  event = "InsertEnter",
  ---@param opts cmp.ConfigSchema
  opts = function()
    local cmp = require("cmp")
    local luasnip = require("luasnip")

    -- gray
    vim.cmd("highlight! CmpItemAbbrDeprecated guibg=NONE gui=strikethrough guifg=#808080")
    -- blue
    vim.cmd("highlight! CmpItemAbbrMatch guibg=NONE guifg=#569CD6")
    vim.cmd("highlight! link CmpItemAbbrMatchFuzzy CmpItemAbbrMatch")
    -- light blue
    vim.cmd("highlight! CmpItemKindVariable guibg=NONE guifg=#9CDCFE")
    vim.cmd("highlight! link CmpItemKindInterface CmpItemKindVariable")
    vim.cmd("highlight! link CmpItemKindText CmpItemKindVariable")
    -- pink
    vim.cmd("highlight! CmpItemKindFunction guibg=NONE guifg=#C586C0")
    vim.cmd("highlight! link CmpItemKindMethod CmpItemKindFunction")
    -- front
    vim.cmd("highlight! CmpItemKindKeyword guibg=NONE guifg=#D4D4D4")
    vim.cmd("highlight! link CmpItemKindProperty CmpItemKindKeyword")
    vim.cmd("highlight! link CmpItemKindUnit CmpItemKindKeyword")

    local has_words_before = function()
      local line, col = unpack(vim.api.nvim_win_get_cursor(0))
      return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
    end

    local bufferCmpConfig = {
      name = "buffer",
      option = {
        get_bufnrs = function()
          local bufs = {}
          for _, buf in ipairs(vim.api.nvim_list_bufs()) do
            local byte_size = vim.api.nvim_buf_get_offset(buf, vim.api.nvim_buf_line_count(buf))
            if byte_size > 1024 * 1024 then -- 1 Megabyte max
              bufs[buf] = false
            else
              bufs[buf] = true
            end
          end
          return vim.tbl_keys(bufs)
        end,
      },
      priority = 100,
      keyword_length = 5,
    }

    local sources = {
      { name = "nvim_lsp", priority = 100 },
      { name = "nvim_lsp_signature_help", priority = 90 },
      { name = "luasnip", priority = 10 },
      bufferCmpConfig,
      { name = "path", priority = 20 },
      {
        option = {
          get_bufnrs = function()
            return vim.api.nvim_list_bufs()
          end,
        },
      },
      { name = "nvim_lua" },
      { name = "emoji" },
      { name = "calc" },
      { name = "git" },
    }

    local writing_sources = {
      { name = "dictionary", keyword_length = 1 },
      bufferCmpConfig,
      { name = "nvim_lsp" },
      { name = "emoji" },
      { name = "calc" },
      { name = "git" },
    }
    cmp.setup.filetype("gitcommit", {
      sources = writing_sources,
    })

    cmp.setup.filetype("markdown", {
      sources = writing_sources,
    })

    cmp.setup.cmdline("/", {
      sources = cmp.config.sources({
        { name = "nvim_lsp_document_symbol" },
        { name = "buffer", keyword_length = 0 },
      }),
    })

    cmp.setup.cmdline(":", {
      sources = {
        { name = "cmdline", keyword_length = 0 },
      },
    })

    cmp.setup.filetype({ "dap-repl", "dapui_watches", "dapui_hover" }, {
      sources = {
        { name = "dap" },
      },
    })

    local compare = require("cmp.config.compare")
    local sorting = {
      comparators = {
        compare.score,
        compare.order,
      },
    }

    return {
      -- enabled = function()
      --   return vim.api.nvim_buf_get_option(0, "buftype") ~= "prompt" or require("cmp_dap").is_dap_buffer()
      -- end,
      completion = {
        completeopt = "menu,menuone,noinsert",
      },
      snippet = {
        expand = function(args)
          require("luasnip").lsp_expand(args.body)
        end,
      },
      mapping = {
        ["<C-k>"] = cmp.mapping.select_prev_item(),
        ["<C-j>"] = cmp.mapping.select_next_item(),
        ["<C-f>"] = cmp.mapping.scroll_docs(-4),
        ["<C-b>"] = cmp.mapping.scroll_docs(4),
        ["<C-Space>"] = cmp.mapping.complete(),
        -- ['<ESC>'] = cmp.mapping.abort(),
        ["<CR>"] = cmp.mapping.confirm({
          behavior = cmp.ConfirmBehavior.Replace,
          -- select = true,
        }),
        ["<Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item()
          elseif has_words_before() then
            if luasnip.expand_or_jumpable() then
              luasnip.expand_or_jump()
            else
              cmp.complete()
            end
          else
            fallback()
          end
        end, { "i", "c" }),

        ["<S-Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
        end, { "i", "c" }),
      },
      sources = cmp.config.sources(sources),
      sorting = sorting,
      formatting = {
        format = function(entry, item)
          local icons = require("lazyvim.config").icons.kinds
          if icons[item.kind] then
            item.kind = icons[item.kind] .. item.kind
          end
        end,
      },
      experimental = {
        ghost_text = {
          hl_group = "LspCodeLens",
        },
      },
    }
  end,
  dependencies = {
    "hrsh7th/cmp-nvim-lsp",
    "hrsh7th/cmp-buffer",
    "hrsh7th/cmp-path",
    -- "hrsh7th/cmp-nvim-lsp-signature-help",
    "hrsh7th/cmp-buffer",
    "hrsh7th/cmp-path",
    -- Completions for command mode
    "hrsh7th/cmp-cmdline",
    "hrsh7th/cmp-emoji",
    -- completion for calculations
    "hrsh7th/cmp-calc",
    -- completion for neovim lua api
    "hrsh7th/cmp-nvim-lua",
    -- better sort completion items that start with one or more underlines
    "lukas-reineke/cmp-rg",
    "petertriho/cmp-git",
    {
      "uga-rosa/cmp-dictionary",
      config = function()
        local dict = require("cmp_dictionary")
        dict.setup({
          first_case_insensitive = true,
        })
        dict.switcher({
          filetype = {
            lua = "~/.config/nvim/spell/lua.dict",
            typescript = { "~/.config/nvim/spell/typescript.dict", "~/.config/nvim/spell/javascript.dict" },
            javascript = "~/.config/nvim/spell/javascript.dict",
            ruby = "~/.config/nvim/spell/ruby.dict",
          },
          spelllang = {
            en = "~/.config/nvim/spell/english.dict",
            de = "~/.config/nvim/spell/german.dict",
          },
        })
      end,
    },
    {
      "saadparwaiz1/cmp_luasnip",
      dependencies = {
        -- Snippet engine
        {
          "L3MON4D3/LuaSnip",
          opts = {
            history = true,
            delete_check_events = "TextChanged",
          },
          config = function()
            require("luasnip").config.set_config({
              history = true,
              updateevents = "TextChanged,TextChangedI",
            })

            require("luasnip/loaders/from_vscode").lazy_load({
              -- todo, check if paths exist
              paths = {
                "~/.config/nvim/snippets",
                "~/.local/share/nvim/lazy/friendly-snippets",
              },
            })
            -- todo keys: require("plugins.legendary").luasnip()
          end,
          dependencies = {
            -- Snippet collections
            "rafamadriz/friendly-snippets",
          },
        },
      },
    },
  },
}
