-- vi: ft=lua

local Util = require("lazyvim.util")

return {

  -- search/replace in multiple files
  {
    "windwp/nvim-spectre",
    -- stylua: ignore
    keys = {
      { "<leader>sr", function() require("spectre").open() end, desc = "Replace in files (Spectre)" },
    },
  },

  {
    -- f/F/t/T motions on steroids, building on the Leap interface.
    "ggandor/flit.nvim",
    keys = function()
      ---@type LazyKeys[]
      local ret = {}
      for _, key in ipairs({ "f", "F", "t", "T" }) do
        ret[#ret + 1] = { key, mode = { "n", "x", "o" }, desc = key }
      end
      return ret
    end,
    opts = { labeled_modes = "nx" },
  },
  {
    "ggandor/leap.nvim",
    keys = {
      { "s", mode = { "n", "x", "o" }, desc = "Leap forward to" },
      { "S", mode = { "n", "x", "o" }, desc = "Leap backward to" },
      { "gs", mode = { "n", "x", "o" }, desc = "Leap from windows" },
    },
    config = function(_, opts)
      local leap = require("leap")
      for k, v in pairs(opts) do
        leap.opts[k] = v
      end
      leap.add_default_mappings(true)
      vim.keymap.del({ "x", "o" }, "x")
      vim.keymap.del({ "x", "o" }, "X")
    end,
  },

  -- which-key
  {
    "folke/which-key.nvim",
    event = "VeryLazy",
    opts = {
      plugins = { spelling = true },
    },
    config = function(_, opts)
      local wk = require("which-key")
      wk.setup(opts)
      local keymaps = {
        mode = { "n", "v" },
        ["g"] = { name = "+goto" },
        ["gz"] = { name = "+surround" },
        ["]"] = { name = "+next" },
        ["["] = { name = "+prev" },
        ["<leader><tab>"] = { name = "+tabs" },
        ["<leader>b"] = { name = "+buffer" },
        ["<leader>c"] = { name = "+code" },
        ["<leader>f"] = { name = "+file/find" },
        ["<leader>g"] = { name = "+git" },
        ["<leader>gh"] = { name = "+hunks" },
        ["<leader>q"] = { name = "+quit/session" },
        ["<leader>s"] = { name = "+search" },
        ["<leader>u"] = { name = "+ui" },
        ["<leader>r"] = { name = "+run" },
        ["<leader>w"] = { name = "+windows" },
        ["<leader>x"] = { name = "+diagnostics/quickfix" },
      }
      if Util.has("noice.nvim") then
        keymaps["<leader>sn"] = { name = "+noice" }
      end
      wk.register(keymaps)
    end,
  },

  -- references, automatically highlighting and jumping
  {
    "RRethy/vim-illuminate",
    event = { "BufReadPost", "BufNewFile" },
    opts = { delay = 200 },
    config = function(_, opts)
      require("illuminate").configure(opts)

      local function map(key, dir, buffer)
        vim.keymap.set("n", key, function()
          require("illuminate")["goto_" .. dir .. "_reference"](false)
        end, { desc = dir:sub(1, 1):upper() .. dir:sub(2) .. " Reference", buffer = buffer })
      end

      map("]]", "next")
      map("[[", "prev")

      -- also set it after loading ftplugins, since a lot overwrite [[ and ]]
      vim.api.nvim_create_autocmd("FileType", {
        callback = function()
          local buffer = vim.api.nvim_get_current_buf()
          map("]]", "next", buffer)
          map("[[", "prev", buffer)
        end,
      })
    end,
    keys = {
      { "]]", desc = "Next Reference" },
      { "[[", desc = "Prev Reference" },
    },
  },

  -- buffer remove
  {
    "echasnovski/mini.bufremove",
    -- stylua: ignore
    keys = {
      { "<leader>bd", function() require("mini.bufremove").delete(0, false) end, desc = "Delete Buffer" },
      { "<leader>bD", function() require("mini.bufremove").delete(0, true) end, desc = "Delete Buffer (Force)" },
    },
  },

  {
    "NvChad/nvim-colorizer.lua",
    config = true,
  },

  {
    "mbbill/undotree",
    cmd = "UndotreeToggle",
    keys = {
      { "<leader>tu", ":UndotreeToggle<CR>", desc = "Toggle undo tree" },
      { "<F10>", ":UndotreeToggle<CR>", desc = "Toggle undo tree" },
    },
  },

  { "nelstrom/vim-visual-star-search", event = "BufEnter" },

  -- set OPEN_AI_KEY env variable
  -- {
  --   "jackMort/ChatGPT.nvim",
  --   config = function()
  --     require("chatgpt").setup({
  --       -- optional configuration
  --     })
  --   end,
  --   dependencies = {
  --     "MunifTanjim/nui.nvim",
  --     "nvim-lua/plenary.nvim",
  --     "nvim-telescope/telescope.nvim",
  --   },
  -- },

  {
    url = "https://gitlab.com/yorickpeterse/nvim-window.git",
    config = function()
      require("nvim-window").setup({
        chars = {
          "h",
          "j",
          "k",
          "l",
          "a",
          "s",
          "d",
          "f",
        },
      })
    end,
    keys = {
      {

        "<leader>ww",
        function()
          require("nvim-window").pick()
        end,
        desc = "Pick window to focus",
      },
    },
    event = "BufRead",
  },

  {
    "declancm/maximize.nvim",
    lazy = true,
    keys = {
      {
        "<leader>Z",
        function()
          require("maximize").toggle()
        end,
        desc = "Toggle maximize window",
      },
    },
    config = function()
      require("maximize").setup({ default_keymaps = false })
    end,
  },

  {
    "ckolkey/ts-node-action",
    lazy = true,
    dependencies = { "nvim-treesitter", "nvim-lua/plenary.nvim", "jose-elias-alvarez/null-ls.nvim" },
    keys = {
      {
        "<leader>ci",
        function()
          require("ts-node-action").node_action()
        end,
        desc = "Treesitter node action",
      },
    },
    config = function()
      require("ts-node-action").setup({})
      require("null-ls").register({
        name = "ts-node-actions",
        method = { require("null-ls").methods.CODE_ACTION },
        filetypes = { "_all" },
        generator = {
          fn = require("ts-node-action").available_actions,
        },
      })
    end,
  },

  {
    "hoschi/yode-nvim",
    lazy = true,
    keys = {
      {
        "<leader>up",
        ":YodeCreateSeditorFloating<CR>",
        desc = "Pick a range and make it sticky",
        mode = "v",
      },
    },
  },

  -- more than a dozen new text objects
  {
    "chrisgrieser/nvim-various-textobjs",
    config = function()
      require("various-textobjs").setup({ useDefaultKeymaps = true })
    end,
  },

  -- bionic reading
  {
    cmd = "FSToggle",
    lazy = true,
    "nullchilly/fsread.nvim",
  },

  {
    "tzachar/local-highlight.nvim",
    lazy = true,
  },

  {
    "pbrisbin/vim-mkdir",
  },
}
