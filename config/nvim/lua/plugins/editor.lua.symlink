-- vi: ft=lua

return {

	-- which-key
	{
		"folke/which-key.nvim",
		event = "VeryLazy",
		opts = {
			plugins = { spelling = true },
			defaults = {
				mode = { "n", "v" },
				["g"] = { name = "+goto" },
				["gs"] = { name = "+surround" },
				["]"] = { name = "+next" },
				["["] = { name = "+prev" },
				["<leader><tab>"] = { name = "+tabs" },
				["<leader>a"] = { name = "+ai" },
				["<leader>b"] = { name = "+buffer" },
				["<leader>c"] = { name = "+code" },
				["<leader>f"] = { name = "+file/find" },
				["<leader>ct"] = { name = "+test" },
				["<leader>g"] = { name = "+git" },
				["<leader>gh"] = { name = "+hunks" },
				["<leader>q"] = { name = "+quit/session" },
				["<leader>s"] = { name = "+search" },
				["<leader>t"] = { name = "+tools" },
				["<leader>tt"] = { name = "+terminal" },
				["<leader>td"] = { name = "+docker" },
				["<leader>u"] = { name = "+ui" },
				["<leader>r"] = { name = "+refactor" },
				["<leader>R"] = { name = "+run" },
				["<leader>w"] = { name = "+windows" },
				["<leader>x"] = { name = "+diagnostics/quickfix" },
				["<leader>xn"] = { name = "+noice" },
				["<leader>z"] = { name = "+spelling" },
			},
		},
		config = function(_, opts)
			local wk = require("which-key")
			wk.setup(opts)
			wk.register(opts.defaults)
		end,
	},

	{
		"NvChad/nvim-colorizer.lua",
		config = true,
	},

	{
		"mbbill/undotree",
		cmd = "UndotreeToggle",
		keys = {
			{ "<leader>tu", ":UndotreeToggle<CR>", desc = "Toggle undo tree" },
			{ "<F10>", ":UndotreeToggle<CR>", desc = "Toggle undo tree" },
		},
	},

	{
		"kevinhwang91/nvim-fundo",
		dependencies = "kevinhwang91/promise-async",
		build = function()
			require("fundo").install()
		end,
		opts = {},
	},

	{ "nelstrom/vim-visual-star-search", event = "BufEnter" },

	-- set OPEN_AI_KEY env variable
	{
		"jackMort/ChatGPT.nvim",
		event = "VeryLazy",
		config = function()
			require("chatgpt").setup({
				yank_register = "c",
				-- optional configuration
			})
		end,
		dependencies = {
			"MunifTanjim/nui.nvim",
			"nvim-lua/plenary.nvim",
			"nvim-telescope/telescope.nvim",
		},
		keys = {
			{ "<leader>ac", "<cmd>ChatGPT<CR>", desc = "Chat" },
			{
				"<leader>ae",
				"<cmd>ChatGPTEditWithInstruction<CR>",
				desc = "Edit with instructions",
				mode = { "x", "n" },
			},
			{
				"<leader>ag",
				"<cmd>ChatGPTRun grammar_correction<CR>",
				desc = "Grammer correction",
				mode = { "x", "n" },
			},
			{ "<leader>at", "<cmd>ChatGPTRun translate<CR>", desc = "Translate", mode = { "x", "n" } },
			{ "<leader>ak", "<cmd>ChatGPTRun keywords<CR>", desc = "Keywords", mode = { "x", "n" } },
			{ "<leader>ad", "<cmd>ChatGPTRun docstring<CR>", desc = "Docstring", mode = { "x", "n" } },
			{ "<leader>at", "<cmd>ChatGPTRun add_tests<CR>", desc = "Tests", mode = { "x", "n" } },
			{ "<leader>ao", "<cmd>ChatGPTRun optimize_code<CR>", desc = "Optimize code", mode = { "x", "n" } },
			{ "<leader>as", "<cmd>ChatGPTRun summarize<CR>", desc = "Summarize", mode = { "x", "n" } },
			{ "<leader>ab", "<cmd>ChatGPTRun fix_bugs<CR>", desc = "Fix Bugs", mode = { "x", "n" } },
			{ "<leader>ax", "<cmd>ChatGPTRun explain_code<CR>", desc = "Explain", mode = { "x", "n" } },
			{ "<leader>aR", "<cmd>ChatGPTRun roxygen_edit<CR>", desc = "Roxygen Edit", mode = { "x", "n" } },
			{
				"<leader>ar",
				"<cmd>ChatGPTRun code_readability_analysis<CR>",
				desc = "Readability Analysis",
				mode = { "x", "n" },
			},
			{ "<leader>ar", "<cmd>ChatGPTCompleteCode<CR>", desc = "Complete Code" },
			{ "<leader>aa", "<cmd>ChatGPTActAs<CR>", desc = "Act As" },
		},
	},

	{
		url = "https://gitlab.com/yorickpeterse/nvim-window.git",
		config = function()
			require("nvim-window").setup({
				chars = {
					"h",
					"j",
					"k",
					"l",
					"a",
					"s",
					"d",
					"f",
				},
			})
		end,
		keys = {
			{
				"<leader>ww",
				function()
					require("nvim-window").pick()
				end,
				desc = "Pick window to focus",
			},
		},
		event = "BufRead",
	},

	{
		"ckolkey/ts-node-action",
		lazy = true,
		dependencies = { "nvim-treesitter", "nvim-lua/plenary.nvim", "nvimtools/none-ls.nvim" },
		keys = {
			{
				"<leader>ci",
				function()
					require("ts-node-action").node_action()
				end,
				desc = "TS-node action",
			},
		},
		config = function()
			require("ts-node-action").setup({})
			require("null-ls").register({
				name = "ts-node-actions",
				method = { require("null-ls").methods.CODE_ACTION },
				filetypes = { "_all" },
				generator = {
					fn = require("ts-node-action").available_actions,
				},
			})
		end,
	},

	{
		"hoschi/yode-nvim",
		lazy = true,
		keys = {
			{
				"<leader>up",
				":YodeCreateSeditorFloating<CR>",
				desc = "Pick a range and make it sticky",
				mode = "v",
			},
		},
	},

	-- more than a dozen new text objects
	{
		"chrisgrieser/nvim-various-textobjs",
		config = function()
			require("various-textobjs").setup({ useDefaultKeymaps = true })
			-- overwrite conflicts with default keymap
			vim.keymap.set({ "n", "v" }, "L", "g_", { noremap = true, silent = true, desc = "Jump to end of line" })
		end,
	},

	-- bionic reading
	{
		cmd = "FSToggle",
		lazy = true,
		"nullchilly/fsread.nvim",
	},

	{
		"tzachar/local-highlight.nvim",
		lazy = true,
	},

	{
		"tzachar/highlight-undo.nvim",
		config = function()
			require("highlight-undo").setup({})
		end,
	},

	{
		"Zeioth/compiler.nvim",
		cmd = { "CompilerOpen", "CompilerToggleResults", "CompilerRedo" },
		dependencies = { "stevearc/overseer.nvim" },
		keys = {
			{ "<F6>", "<cmd>CompilerOpen<cr>", desc = "Open Compiler" },
			{ "<F18>", "<cmd>CompilerToggleResults<cr>", desc = "Toggle compiler results" },
		},
		opts = {},
	},

	{
		"stevearc/overseer.nvim",
		keys = {
			{
				"<leader>Rr",
				"<CMD>OverseerRun<CR>",
				desc = "Run Overseer",
			},
		},
		config = function()
			require("overseer").setup({
				strategy = "toggleterm",
			})
		end,
	},

	{
		"pbrisbin/vim-mkdir",
	},

	{
		-- winbar plugin
		"Bekaboo/dropbar.nvim",
	},

	{
		-- provides lsp features and a code completion source for code embedded in other documents
		"jmbuhr/otter.nvim",
		keys = {
			{
				"<leader>cy",
				":lua require'otter'.activate({''})",
				desc = "Add embedded filetype LSP",
			},
		},
		dependencies = {
			"hrsh7th/nvim-cmp",
			"neovim/nvim-lspconfig",
			"nvim-treesitter/nvim-treesitter",
		},
	},

	-- sometimes triggers issues with autocmd's, try later again
	-- {
	-- 	-- plugin to maintain lines max length
	-- 	"fmbarina/multicolumn.nvim",
	-- 	opts = {
	-- 		sets = {
	-- 			lua = {
	-- 				scope = "file",
	-- 				rulers = { 121 },
	-- 				full_column = true,
	-- 			},
	-- 			NeogitCommitMessage = {
	-- 				scope = "window",
	-- 				rulers = { 51 },
	-- 				to_line_end = true,
	-- 				always_on = true,
	-- 			},
	-- 			gitcommit = {
	-- 				scope = "window",
	-- 				rulers = { 51 },
	-- 				to_line_end = true,
	-- 				always_on = true,
	-- 			},
	-- 		},
	-- 	},
	-- },

	{
		-- display lsp hover documentation in a side panel.
		"amrbashir/nvim-docs-view",
		opts = {
			position = "bottom",
		},
		cmd = { "DocsViewToggle" },
		keys = {
			{ "<leader>uD", "<cmd>DocsViewToggle<CR>", desc = "LSP hover doc side panel" },
		},
	},

	{
		"folke/zen-mode.nvim",
		opts = {
			plugins = {
				-- twilight = { enabled = false },
			},
		},
		keys = {
			{ "<leader>uz", "<cmd>ZenMode<CR>", desc = "ZenMode" },
		},
	},

	{
		"folke/twilight.nvim",
		opts = {
			dimming = {
				-- alpha = 0.75,
			},
			-- context = 0,
		},
		keys = {
			{ "<leader>ut", "<cmd>Twilight<CR>", desc = "Twilight" },
		},
	},

	{
		"klen/nvim-config-local",
		opts = {},
	},

	-- makes some plugins dot-repeatable like leap
	{ "tpope/vim-repeat", event = "VeryLazy" },

	{
		"ThePrimeagen/refactoring.nvim",
		dependencies = {
			"nvim-lua/plenary.nvim",
			"nvim-treesitter/nvim-treesitter",
		},
		config = function()
			require("refactoring").setup()
		end,
		keys = {
			{ "<leader>re", "<cmd>Refactor extract<CR>", desc = "Extract", mode = { "n", "v" } },
			{ "<leader>rf", "<cmd>Refactor extract_to_file<CR>", desc = "extract to file", mode = { "n", "v" } },
			{ "<leader>rv", "<cmd>Refactor extract_var<CR>", desc = "extract var", mode = { "n", "v" } },
			{ "<leader>rb", "<cmd>Refactor extract_block<CR>", desc = "extract block", mode = { "n", "v" } },
			{ "<leader>r", "<cmd>Refactor refactor_names<CR>", desc = "refactor names", mode = { "n", "v" } },
			{ "<leader>ri", "<cmd>Refactor inline_var<CR>", desc = "inline var", mode = { "n", "v" } },
			{ "<leader>ru", "<cmd>Refactor inline_func<CR>", desc = "inline func", mode = { "n", "v" } },
			{
				"<leader>rr",
				function()
					require("refactoring").select_refactor()
				end,
				desc = "Select refactor", mode = { "n", "v" }
			},
		},
	},
}
