-- vi: ft=lua

local M = {}

function M.config()
  -- local dap_status_ok, dap = pcall(require, "dap")
  -- if not dap_status_ok then
  --   return
  -- end

  -- local dap_install_status_ok, dap_install = pcall(require, "dap-install")
  -- if not dap_install_status_ok then
  --   return
  -- end

  -- dap_install.config("lua", {})
  --   vim.keymap.set("n", "<leader>dh", function()
  --     require("dap").toggle_breakpoint()
  --   end)
  --   vim.keymap.set("n", "<leader>dH", ":lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>")
  --   vim.keymap.set("n", "<A-k>", function()
  --     require("dap").step_out()
  --   end)
  --   vim.keymap.set("n", "<A-l>", function()
  --     require("dap").step_into()
  --   end)
  --   vim.keymap.set("n", "<A-j>", function()
  --     require("dap").step_over()
  --   end)
  --   vim.keymap.set("n", "<A-h>", function()
  --     require("dap").continue()
  --   end)
  --   vim.keymap.set("n", "<leader>dn", function()
  --     require("dap").run_to_cursor()
  --   end)
  --   vim.keymap.set("n", "<leader>dc", function()
  --     require("dap").terminate()
  --   end)
  --   vim.keymap.set("n", "<leader>dR", function()
  --     require("dap").clear_breakpoints()
  --   end)
  --   vim.keymap.set("n", "<leader>de", function()
  --     require("dap").set_exception_breakpoints({ "all" })
  --   end)
  --   vim.keymap.set("n", "<leader>da", function()
  --     require("debugHelper").attach()
  --   end)
  --   vim.keymap.set("n", "<leader>dA", function()
  --     require("debugHelper").attachToRemote()
  --   end)
  --   vim.keymap.set("n", "<leader>di", function()
  --     require("dap.ui.widgets").hover()
  --   end)
  --   vim.keymap.set("n", "<leader>d?", function()
  --     local widgets = require("dap.ui.widgets")
  --     widgets.centered_float(widgets.scopes)
  --   end)
  --   vim.keymap.set("n", "<leader>dk", ":lua require\"dap\".up()<CR>zz")
  --   vim.keymap.set("n", "<leader>dj", ":lua require\"dap\".down()<CR>zz")
  --   vim.keymap.set("n", "<leader>dr", ":lua require\"dap\".repl.toggle({}, \"vsplit\")<CR><C-w>l")

  --   dap.adapters.node2 = {
  --     type = "executable",
  --     command = "node",
  --     args = { os.getenv("HOME") .. "/Workspace/Apps/vscode-node-debug2/out/src/nodeDebug.js" },
  --   }
  --   dap.configurations.typescript = {
  --     {
  --       name = "Launch",
  --       type = "node2",
  --       request = "launch",
  --       program = "${workspaceFolder}/src/main.ts",
  --       cwd = vim.fn.getcwd(),
  --       sourceMaps = true,
  --       protocol = "inspector",
  --       console = "integratedTerminal",
  --     },
  --     {
  --       -- For this to work you need to make sure the node process is started with the `--inspect` flag.
  --       name = "Attach to process",
  --       type = "node2",
  --       request = "attach",
  --       processId = require("dap.utils").pick_process,
  --     },
  --   }

  --   -- local dap_ui_status_ok, dap_ui = pcall(require, "dapui")
  --   -- if not dap_ui_status_ok then
  --   --   return
  --   -- end

  --   -- local lspconfig_status_ok, lspconfig = pcall(require, "lspconfig")
  --   -- if not lspconfig_status_ok then
  --   --   return
  --   -- end

  --   -- local rust_tools_status_ok, rust_tools = pcall(require, "rust-tools")
  --   -- if not rust_tools_status_ok then
  --   --   return
  --   -- end

  --   -- local codelldb_path = "~/.vscode-oss/extensions/vadimcn.vscode-lldb-1.6.10/adapter/codelldb"

  --   -- dap.adapters.lldb = function(on_adapter)
  --   --   local stdout = vim.loop.new_pipe(false)
  --   --   local stderr = vim.loop.new_pipe(false)

  --   --   local cmd = codelldb_path
  --   --   local handle, pid_or_err
  --   --   local opts = {
  --   --     stdio = { nil, stdout, stderr },
  --   --     args = { "--params", "{\"showDisassembly\":\"never\" }" },
  --   --     detached = true,
  --   --     verbatim = true,
  --   --   }
  --   --   handle, pid_or_err = vim.loop.spawn(cmd, opts, function(code)
  --   --     stdout:close()
  --   --     stderr:close()
  --   --     handle:close()
  --   --     if code ~= 0 then
  --   --       print("codelldb exited with code", code)
  --   --     end
  --   --   end)

  --   --   assert(handle, "Error running codelldb: " .. tostring(pid_or_err))
  --   --   stdout:read_start(function(err, chunk)
  --   --     assert(not err, err)
  --   --     if chunk then
  --   --       local port = chunk:match("Listening on port (%d+)")
  --   --       if port then
  --   --         vim.schedule(function()
  --   --           on_adapter({
  --   --             type = "server",
  --   --             host = "127.0.0.1",
  --   --             port = port,
  --   --           })
  --   --         end)
  --   --       else
  --   --         vim.schedule(function()
  --   --           dap.repl.append(chunk)
  --   --         end)
  --   --       end
  --   --     end
  --   --   end)
  --   --   stderr:read_start(function(err, chunk)
  --   --     assert(not err, err)
  --   --     if chunk then
  --   --       vim.schedule(function()
  --   --         dap.repl.append(chunk)
  --   --       end)
  --   --     end
  --   --   end)
  --   -- end

  --   -- dap.defaults.fallback.terminal_win_cmd = "below 10new"

  --   -- dap_ui.setup({
  --   --   icons = { expanded = "▾", collapsed = "▸" },
  --   --   mappings = {
  --   --     expand = { "<CR>", "<2-LeftMouse>" },
  --   --     open = "o",
  --   --     remove = "d",
  --   --     edit = "e",
  --   --     repl = "r",
  --   --   },
  --   --   sidebar = {
  --   --     elements = {
  --   --       { id = "breakpoints", size = 0.1 },
  --   --       { id = "watches", size = 0.45 },
  --   --       { id = "scopes", size = 0.45 },
  --   --     },
  --   --     size = 40,
  --   --     position = "left",
  --   --   },
  --   --   tray = {
  --   --     elements = { "repl" },
  --   --     size = 30,
  --   --     position = "right",
  --   --   },
  --   --   floating = {
  --   --     max_height = nil,
  --   --     max_width = nil,
  --   --     mappings = {
  --   --       close = { "q", "<Esc>" },
  --   --     },
  --   --   },
  --   --   windows = { indent = 1 },
  --   -- })

  --   -- -- dap.adapters.ruby = {
  --   -- -- 	type = 'executable';
  --   -- -- 	command = 'bundle';
  --   -- -- 	args = {'exec', 'readapt', 'stdio'};
  --   -- -- }

  --   -- -- dap.configurations.ruby = {
  --   -- -- 	{
  --   -- -- 		type = 'ruby';
  --   -- -- 		request = 'launch';
  --   -- -- 		name = 'Rails';
  --   -- -- 		program = 'bundle';
  --   -- -- 		programArgs = {'exec', 'ruby', 'main.rb'};
  --   -- -- 		useBundler = true;
  --   -- -- 	},
  --   -- -- }

  --   -- dap.configurations.lua = {
  --   --   {
  --   --     type = "nlua",
  --   --     request = "attach",
  --   --     name = "Attach to running Neovim instance",
  --   --     host = function()
  --   --       local value = vim.fn.input("Host [127.0.0.1]: ")
  --   --       if value ~= "" then
  --   --         return value
  --   --       end
  --   --       return "127.0.0.1"
  --   --     end,
  --   --     port = function()
  --   --       local val = tonumber(vim.fn.input("Port: "))
  --   --       assert(val, "Please provide a port number")
  --   --       return val
  --   --     end,
  --   --   },
  --   -- }

  --   -- dap.adapters.nlua = function(callback, config)
  --   --   callback({ type = "server", host = config.host, port = config.port })
  --   -- end

  --   -- dap.configurations.rust = {
  --   --   {
  --   --     -- The first three options are required by nvim-dap
  --   --     type = "lldb",
  --   --     request = "launch",
  --   --     name = "Launch file",

  --   --     -- Options below are for CodeLLDB
  --   --     cwd = "${workspaceFolder}",
  --   --     program = function()
  --   --       local workspaceRoot = lspconfig.rust_analyzer.get_root_dir()
  --   --       local workspaceName = vim.fn.fnamemodify(workspaceRoot, ":t")

  --   --       return vim.fn.input("Path to executable: ", workspaceRoot .. "/target/debug/" .. workspaceName, "file")
  --   --     end,
  --   --     stopOnEntry = false,
  --   --     sourceLanguages = { "rust" },
  --   --   },
  --   -- }

  --   -- -- map("n", "<leader>dt", ":lua require'dap'.toggle_breakpoint()<CR>", map_opts)
  --   -- -- map("n", "<leader>dc", ":lua require'dap'.continue()<CR>", map_opts)

  --   -- -- rust_tools.setup({})
  --   -- rust_tools.setup({
  --   --   server = { on_attach = on_attach.common },
  --   --   dap = {
  --   --     adapter = dap.adapters.lldb,
  --   --   },
  --   -- })
end

-- return M

-- local M = {}

-- M.config = function()
--   local dap = require("dap")

--   local dapConfig = {
--     active = true,
--     on_config_done = nil,
--     breakpoint = {
--       text = "",
--       texthl = "LspDiagnosticsSignError",
--       linehl = "",
--       numhl = "",
--     },
--     breakpoint_rejected = {
--       text = "",
--       texthl = "LspDiagnosticsSignHint",
--       linehl = "",
--       numhl = "",
--     },
--     stopped = {
--       text = "",
--       texthl = "LspDiagnosticsSignInformation",
--       linehl = "DiagnosticUnderlineInfo",
--       numhl = "LspDiagnosticsSignInformation",
--     },
--   }
--   if lvim.use_icons then
--     vim.fn.sign_define("DapBreakpoint", dapConfig.breakpoint)
--     vim.fn.sign_define("DapBreakpointRejected", dapConfig.breakpoint_rejected)
--     vim.fn.sign_define("DapStopped", dapConfig.stopped)
--   end

--   dap.defaults.fallback.terminal_win_cmd = "50vsplit new"
-- end

-- TODO put this up there ^^^ call in ftplugin

-- M.dap = function()
--   if lvim.plugin.dap.active then
--     local dap_install = require "dap-install"
--     dap_install.config("python_dbg", {})
--   end
-- end
--
-- M.dap = function()
--   -- gem install readapt ruby-debug-ide
--   if lvim.plugin.dap.active then
--     local dap_install = require "dap-install"
--     dap_install.config("ruby_vsc_dbg", {})
--   end
-- end

return M
