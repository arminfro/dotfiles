-- vi: ft=lua

return {

	-- visualise and resolve git conflicts
	{
		"akinsho/git-conflict.nvim",
		cmd = {

			"GitConflictChooseOurs",
			"GitConflictChooseTheirs",
			"GitConflictChooseBoth",
			"GitConflictChooseNone",
			"GitConflictNextConflict",
			"GitConflictPrevConflict",
			"GitConflictListQf",
		},
		version = "*",
		config = function()
			require("git-conflict").setup()
			vim.api.nvim_create_autocmd("User", {
				pattern = "GitConflictDetected",
				callback = function()
					vim.notify("Conflict detected in " .. vim.fn.expand("<afile>"))
				end,
			})
		end,
	},

	{
		"sindrets/diffview.nvim",
		lazy = true,
		keys = {
			{
				"<leader>gD",
				":DiffviewOpen -uno<CR>",
				desc = "Git diff workspace",
				mode = "n",
			},
			{
				"<leader>gd",
				":DiffviewOpen<CR>",
				desc = "Git diff file",
				mode = { "n", "v" },
			},
		},
		config = function()
			vim.api.nvim_create_autocmd(
				"FileType",
				{ pattern = "DiffviewFiles", command = [[nnoremap <buffer><silent> q :DiffviewClose<CR>]] }
			)

			vim.api.nvim_create_autocmd(
				"FileType",
				{ pattern = "DiffviewFileHistory", command = [[nnoremap <buffer><silent> q :DiffviewClose<CR>]] }
			)
		end,
	},

	{
		"tpope/vim-fugitive",
		cmd = { "Git", "Gdiffsplit", "Gread", "Gwrite", "Ggrep", "GMove", "GRename", "GDelete", "GRemove", "GBrowse" },
		keys = {
			{
				"<leader>gs",
				":Git<CR>",
				desc = "Git Status in fugitive",
			},
			{
				"<leader>gr",
				":Gread<CR>",
				desc = "Git Read file",
			},
			{
				"<leader>gw",
				":Gwrite<CR>",
				desc = "Git Stage file",
			},
			{
				"<leader>gc",
				":Git commit<CR>",
				desc = "Git Commit",
			},
		},
	},

	{
		"ruifm/gitlinker.nvim",
		lazy = true,
		keys = {
			{
				"<leader>gy",
				":lua require'gitlinker'.get_repo_url()<CR>",
				desc = "Git yank git url",
			},
		},
		opts = {},
	},

	{
		"NeogitOrg/neogit",
		dependencies = {
			"sindrets/diffview.nvim",
			"nvim-telescope/telescope.nvim",
		},
		cmd = "Neogit",
		keys = {
			{ "<leader>gn", "<cmd>Neogit<CR>", desc = "Neogit" },
		},
		-- See: https://github.com/TimUntersberger/neogit#configuration
		opts = {
			disable_signs = false,
			disable_context_highlighting = false,
			disable_commit_confirmation = false,
			signs = {
				section = { ">", "v" },
				item = { ">", "v" },
				hunk = { "", "" },
			},
			integrations = {
				diffview = true,
			},
		},
	},

	{
		"niuiic/git-log.nvim",
		dependencies = {
			"niuiic/core.nvim",
		},
		keys = {
			{ "<leader>gl", ":lua require('git-log').check_log()<CR>", desc = "Check log", mode = { "x", "n" } },
		},
	},
}
