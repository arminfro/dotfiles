-- vi: ft=lua
---@diagnostic disable: missing-parameter

local M = {}

-- todo, setup keybindings
function M.config()
  local status_ok, toggleterm = pcall(require, "toggleterm")
  if not status_ok then
    return
  end

  toggleterm.setup({
    size = 10,
    open_mapping = [[<c-\>]],
    hide_numbers = true,
    shade_filetypes = {},
    shade_terminals = true,
    shading_factor = 2,
    start_in_insert = true,
    insert_mappings = true,
    persist_size = true,
    direction = "float",
    close_on_exit = true,
    shell = vim.o.shell,
    float_opts = {
      border = "single",
      winblend = 3,
      highlights = {
        border = "Normal",
        background = "Normal",
      },
    },
  })

  -- function _G.set_terminal_keymaps()
  --   local opts = { noremap = true }
  --   -- vim.api.nvim_buf_set_keymap(0, "t", "<esc>", [[<C-\><C-n>]], opts)
  --   -- vim.api.nvim_buf_set_keymap(0, "t", "jk", [[<C-\><C-n>]], opts)
  --   -- vim.api.nvim_buf_set_keymap(0, "t", "<C-h>", [[<C-\><C-n><C-W>h]], opts)
  --   -- vim.api.nvim_buf_set_keymap(0, "t", "<C-j>", [[<C-\><C-n><C-W>j]], opts)
  --   -- vim.api.nvim_buf_set_keymap(0, "t", "<C-k>", [[<C-\><C-n><C-W>k]], opts)
  --   -- vim.api.nvim_buf_set_keymap(0, "t", "<C-l>", [[<C-\><C-n><C-W>l]], opts)
  -- end

  -- vim.api.nvim_create_autocmd("TermOpen", {
  --   pattern = "term://*",
  --   callback = function()
  --     set_terminal_keymaps()
  --   end,
  --   desc = "Mappings for navigation with a terminal",
  -- })
end

function M.terminals()
  local Terminal = require("toggleterm.terminal").Terminal

  local node = Terminal:new({ cmd = "node", hidden = true })
  local htop = Terminal:new({ cmd = "htop", hidden = true })
  local ts_node = Terminal:new({ cmd = "ts-node", hidden = true })
  local ruby = Terminal:new({ cmd = "irb", hidden = true })
  local lua = Terminal:new({ cmd = "rep.lua", hidden = true })
  local python = Terminal:new({ cmd = "python", hidden = true })

  return {
    node = function(...)
      node:toggle(...)
    end,
    ts_node = function(...)
      ts_node:toggle(...)
    end,
    htop = function(...)
      htop:toggle(...)
    end,
    ruby = function(...)
      ruby:toggle(...)
    end,
    lua = function(...)
      lua:toggle(...)
    end,
    python = function(...)
      python:toggle(...)
    end,
  }
end

return M
