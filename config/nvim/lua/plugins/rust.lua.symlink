-- vi: ft=lua

return {
  {
    "rust-lang/rust.vim",
    config = function()
      vim.g.rustfmt_autosave = 1
    end,
  },

  {
    "neovim/nvim-lspconfig",
    dependencies = {
      {
        "simrat39/rust-tools.nvim",
        dependencies = {
          {
            "williamboman/mason-lspconfig.nvim",
            opts = {
              ensure_installed = { "rust_analyzer" },
            },
          },
          "williamboman/mason.nvim",
          "nvim-lua/plenary.nvim",
          "mfussenegger/nvim-dap",
        },
        config = function()
          local install_root_dir = vim.fn.stdpath("data") .. "/mason"
          local extension_path = install_root_dir .. "/packages/codelldb/extension/"
          local codelldb_path = extension_path .. "adapter/codelldb"
          local liblldb_path = extension_path .. "lldb/lib/liblldb.so"
          local rust_tools = require("rust-tools")

          rust_tools.setup({
            tools = {
              inlay_hints = {
                -- prefix for parameter hints
                -- default: "<-"
                parameter_hints_prefix = " <- ",

                -- prefix for all the other hints (type, chaining)
                -- default: "=>"
                other_hints_prefix = " => ",
              },
            },
            server = {
              on_attach = function(_, bufnr)
                -- require("dap")
                -- require("dapui")

                -- Hover actions
                vim.keymap.set("n", "<localleader>h", rust_tools.hover_actions.hover_actions, { buffer = bufnr })
                vim.keymap.set(
                  "n",
                  "<leader>rR",
                  rust_tools.runnables.runnables,
                  { desc = "Rust-tools runnables", buffer = bufnr }
                )
                -- Code action groups
                -- vim.keymap.set("n", "<Space>a", rt.code_action_group.code_action_group, { buffer = bufnr })
              end,
              flags = {
                debounce_text_changes = 150,
              },
              settings = {
                ["rust-analyzer"] = {
                  checkOnSave = {
                    enable = true,
                    -- command = "clippy",
                  },
                  cargo = { allFeatures = true },
                  procMacro = { enable = true },
                },
              },
            },
            dap = {
              adapter = require("rust-tools.dap").get_codelldb_adapter(codelldb_path, liblldb_path),
            },
          })
        end,
      },
    },
  },
}
