-- vi: ft=lua

local home_dir = vim.env["HOME"]

local default_path = {}
default_path.project = home_dir .. "/Workspace/Everest/"
default_path.proj_file_path = default_path.project .. "api/src/Everest/"
default_path.dll_file_path = default_path.project .. "Build/Everest/Debug/Everest.dll"

return {

	-- add c_sharp and dot to treesitter
	{
		"nvim-treesitter/nvim-treesitter",
		opts = function(_, opts)
			if type(opts.ensure_installed) == "table" then
				vim.list_extend(opts.ensure_installed, { "c_sharp", "dot" })
			end
		end,
	},

	{
		"williamboman/mason.nvim",
		opts = function(_, opts)
			opts.ensure_installed = opts.ensure_installed or {}
			vim.list_extend(opts.ensure_installed, { "csharp-language-server", "csharpier", "dot-language-server" })
		end,
	},

	{
		"arkaragian/Solution.nvim",
		dependencies = {
			"nvim-lua/plenary.nvim",
			"nvim-treesitter/nvim-treesitter",
		},
	},

	{
		"mfussenegger/nvim-dap",
		optional = true,
		config = function()
			vim.api.nvim_set_keymap(
				"n",
				"<leader>cb",
				":lua vim.g.dotnet_build_project()<CR>",
				{ noremap = true, silent = true, desc = "Build Project" }
			)

			vim.g.dotnet_build_project = function()
				local default_path = default_path.proj_file_path
				if vim.g["dotnet_last_proj_path"] ~= nil then
					default_path = vim.g["dotnet_last_proj_path"]
				end
				local path = vim.fn.input("Path to your *proj file", default_path, "file")
				vim.g["dotnet_last_proj_path"] = path
				local cmd = "dotnet build -c Debug " .. path .. " > /dev/null"
				print("")
				print("Cmd to execute: " .. cmd)
				local f = os.execute(cmd)
				if f == 0 then
					print("\nBuild: ✔️ ")
				else
					print("\nBuild: ❌")
				end
			end

			vim.g.dotnet_get_dll_path = function()
				local request = function()
					return vim.fn.input("Path to dll", default_path.dll_file_path, "file")
				end

				if vim.g["dotnet_last_dll_path"] == nil then
					vim.g["dotnet_last_dll_path"] = request()
				else
					if
						vim.fn.confirm(
							"Do you want to change the path to dll?\n" .. vim.g["dotnet_last_dll_path"],
							"&yes\n&no",
							2
						) == 1
					then
						vim.g["dotnet_last_dll_path"] = request()
					end
				end

				return vim.g["dotnet_last_dll_path"]
			end

			local config = {
				{
					type = "coreclr",
					name = "launch - netcoredbg",
					request = "launch",
					program = function()
						if vim.fn.confirm("Should I recompile first?", "&yes\n&no", 2) == 1 then
							vim.g.dotnet_build_project()
						end
						return vim.g.dotnet_get_dll_path()
					end,
					env = {
						ASPNETCORE_ENVIRONMENT = "Development",
						ASPNETCORE_URLS = "http://localhost:5001",
					},
					cwd = default_path.proj_file_path,
				},
			}

			local dap = require("dap")
			dap.configurations.cs = config
			dap.configurations.fsharp = config
			local netcoredbg_config = {
				type = "executable",
				command = home_dir .. "/.local/share/nvim/mason/bin/netcoredbg",
				args = { "--interpreter=vscode" },
			}
			dap.adapters.coreclr = netcoredbg_config
			dap.adapters.netcoredbg = netcoredbg_config
		end,
	},

	{
		"nvim-neotest/neotest",
		optional = true,
		dependencies = {
			"Issafalcon/neotest-dotnet",
			"mfussenegger/nvim-dap",
		},
		opts = {
			adapters = {
				["neotest-dotnet"] = {
					-- Extra arguments for nvim-dap configuration
					-- See https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for values
					dap = { justMyCode = false },
					-- Let the test-discovery know about your custom attributes (otherwise tests will not be picked up)
					-- Note: Only custom attributes for non-parameterized tests should be added here. See the support note about parameterized tests
					-- custom_attributes = {
					--   xunit = { "MyCustomFactAttribute" },
					--   nunit = { "MyCustomTestAttribute" },
					--   mstest = { "MyCustomTestMethodAttribute" }
					-- },
					-- Provide any additional "dotnet test" CLI commands here. These will be applied to ALL test runs performed via neotest. These need to be a table of strings, ideally with one key-value pair per item.
					dotnet_additional_args = {
						"--verbosity detailed",
					},
					-- Tell neotest-dotnet to use either solution (requires .sln file) or project (requires .csproj or .fsproj file) as project root
					-- Note: If neovim is opened from the solution root, using the 'project' setting may sometimes find all nested projects, however,
					--       to locate all test projects in the solution more reliably (if a .sln file is present) then 'solution' is better.
					discovery_root = "solution", -- Default
				},
			},
		},
	},

	{
		"neovim/nvim-lspconfig",
		dependencies = {
			-- Extended textDocument/definition handler that handles assembly/decompilation loading for $metadata$ documents
			"Decodetalkers/csharpls-extended-lsp.nvim",
		},
		init = function()
			local keys = require("lazyvim.plugins.lsp.keymaps").get()
			-- unset default gd binding to use csharpls-extended-lsp instead in setup field
			keys[#keys + 1] = { "gd", false }
		end,
		opts = {
			servers = {
				csharp_ls = {
					handlers = {
						["textDocument/definition"] = function(err, method, params, client_id)
							require("csharpls_extended").handler(err, method, params, client_id)
						end,
					},
					-- run to install: dotnet tool install --global csharp-ls
					cmd = { vim.env["HOME"] .. "/.dotnet/tools/csharp-ls" },
					root_dir = function(startpath)
						local lspconfig = require("lspconfig")
						return lspconfig.util.root_pattern("*.sln")(startpath)
							or lspconfig.util.root_pattern("*.csproj")(startpath)
							or lspconfig.util.root_pattern("*.fsproj")(startpath)
							or lspconfig.util.root_pattern(".git")(startpath)
					end,
				},
			},
			setup = {
				csharp_ls = function(_, opts) end,
				-- ["*"] = function(server, opts)
				--   require("lazyvim.util").lsp.on_attach(function(client, buffer)
				--     if client.name ~= "csharp_ls" then
				--     end
				--   end)
				-- end,
			},
		},
	},

	-- {
	--   "nvimtools/none-ls.nvim",
	--   opts = function(_, opts)
	--     table.insert(opts.sources, require("null-ls").builtins.formatting.csharpier)
	--   end,
	-- },
}
