-- vi: ft=lua

return {

  -- add typescript to treesitter
  {
    "nvim-treesitter/nvim-treesitter",
    opts = function(_, opts)
      if type(opts.ensure_installed) == "table" then
        vim.list_extend(opts.ensure_installed, { "typescript", "tsx" })
      end
    end,
  },

  -- correctly setup lspconfig
  {
    "neovim/nvim-lspconfig",
    dependencies = { "jose-elias-alvarez/typescript.nvim" },
    opts = {
      -- make sure mason installs the server
      servers = {
        ---@type lspconfig.options.tsserver
        tsserver = {
          settings = {
            typescript = {
              format = {
                indentSize = vim.o.shiftwidth,
                convertTabsToSpaces = vim.o.expandtab,
                tabSize = vim.o.tabstop,
              },
            },
            javascript = {
              format = {
                indentSize = vim.o.shiftwidth,
                convertTabsToSpaces = vim.o.expandtab,
                tabSize = vim.o.tabstop,
              },
            },
            completions = {
              completeFunctionCalls = true,
            },
          },
        },
      },
      setup = {
        tsserver = function(_, opts)
          require("lazyvim.util").on_attach(function(client, buffer)
            if client.name == "tsserver" then
              -- stylua: ignore
              vim.keymap.set("n", "<leader>cF", function()
                require("typescript").actions.fixAll()
              end, { buffer = buffer, desc = "Fix all autofixables" })
              vim.keymap.set("n", "<leader>cu", function()
                require("typescript").actions.removeUnused()
              end, { buffer = buffer, desc = "Remove unused Imports" })
              vim.keymap.set("n", "<leader>co", function()
                require("typescript").actions.organizeImports()
              end, { buffer = buffer, desc = "Organize Imports" })
              vim.keymap.set("n", "<leader>cR", function()
                local source = vim.api.nvim_buf_get_name(0)
                vim.ui.input({ prompt = "New path: ", default = source }, function(input)
                  if input == "" or input == source or input == nil then
                    return
                  end
                  require("typescript").renameFile(source, input)
                end)
              end, { desc = "Rename File", buffer = buffer })
              vim.keymap.set("n", "<leader>cA", function()
                require("typescript").actions.addMissingImports()
              end, { desc = "Add Missing Imports", buffer = buffer })
            end
          end)
          require("typescript").setup({ server = opts })
          return true
        end,
      },
    },
  },

  {
    "jose-elias-alvarez/null-ls.nvim",
    opts = function(_, opts)
      table.insert(opts.sources, require("typescript.extensions.null-ls.code-actions"))
    end,
  },

  {
    "mfussenegger/nvim-dap",
    optional = true,
    dependencies = {
      {
        "williamboman/mason.nvim",
        opts = function(_, opts)
          opts.ensure_installed = opts.ensure_installed or {}
          table.insert(opts.ensure_installed, "js-debug-adapter")
        end,
      },
    },
    opts = function()
      local dap = require("dap")
      if not dap.adapters["pwa-node"] then
        require("dap").adapters["pwa-node"] = {
          type = "server",
          host = "localhost",
          port = "${port}",
          executable = {
            command = "node",
            -- ðŸ’€ Make sure to update this path to point to your installation
            args = {
              require("mason-registry").get_package("js-debug-adapter"):get_install_path()
                .. "/js-debug/src/dapDebugServer.js",
              "${port}",
            },
          },
        }
      end
      for _, language in ipairs({ "typescript", "javascript" }) do
        if not dap.configurations[language] then
          dap.configurations[language] = {
            {
              type = "pwa-node",
              request = "launch",
              name = "Launch file",
              program = "${file}",
              cwd = "${workspaceFolder}",
            },
            {
              type = "pwa-node",
              request = "attach",
              name = "Attach",
              processId = require("dap.utils").pick_process,
              cwd = "${workspaceFolder}",
            },
          }
        end
      end
    end,
  },

  -- todo, does not work
  -- {
  --   "nvim-neotest/neotest",
  --   optional = true,
  --   dependencies = {
  --     "haydenmeade/neotest-jest",
  --   },
  --   opts = {
  --     adapters = {
  --       ["neotest-jest"] = {},
  --     },
  --   },
  -- },

  -- next plugin, bit buggy yet, stay with depcracted for now
  -- {
  --   "pmizio/typescript-tools.nvim",
  --   opts = {
  --     settings = {
  --       tsserver_file_preferences = {
  --         includeInlayParameterNameHints = "all",
  --         includeCompletionsForModuleExports = true,
  --         quotePreference = "auto",
  --       },
  --       tsserver_format_options = {
  --         allowIncompleteCompletions = false,
  --         allowRenameOfImportPath = false,
  --       },
  --     },
  --     on_attach = function()
  --       require("lazyvim.util").on_attach(function(client, buffer)
  --         if client.name == "typescript-tools" then
  --             -- stylua: ignore
  --             vim.keymap.set("n", "<leader>cF", ":TSToolsFixAll<CR>", { buffer = buffer, desc = "Fix all autofixables" })
  --           vim.keymap.set(
  --             "n",
  --             "<leader>cu",
  --             ":TSToolsOrganizeImports<CR>",
  --             { buffer = buffer, desc = "Remove unused Imports" }
  --           )
  --           vim.keymap.set(
  --             "n",
  --             "<leader>co",
  --             ":TSToolsAddMissingImports<CR>",
  --             { buffer = buffer, desc = "Organize Imports" }
  --           )
  --         end
  --       end)
  --     end,
  --   },
  --   dependencies = {
  --     "nvim-lua/plenary.nvim",
  --     "neovim/nvim-lspconfig",
  --   },
  -- },
}
