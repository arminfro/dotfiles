-- vi: ft=lua

return {

	{
		-- documentation generator
		"danymat/neogen",
		cmd = "Neogen",
		opts = {
			snippet_engine = "luasnip",
			enabled = true,
			jump_map = "<tab>",
		},
		keys = {
			{
				"<leader>cg",
				":Neogen",
				desc = "Generate Documentation",
				mode = "n",
			},
		},
	},

	{
		"gennaro-tedesco/nvim-jqx",
		cmd = { "JqxList", "JqxQuery" },
		ft = { "json", "yaml" },
	},

	{
		"andrewferrier/debugprint.nvim",
		cmd = "DeleteDebugPrints",
		event = "BufRead",
		config = true,
	},

	{
		"bennypowers/nvim-regexplainer",
		opts = { auto = true },
		dependencies = {
			"nvim-treesitter/nvim-treesitter",
			"MunifTanjim/nui.nvim",
		},
	},

	{
		"axelvc/template-string.nvim",
		config = function()
			require("template-string").setup({
				filetypes = { "typescript", "javascript", "typescriptreact", "javascriptreact" },
				jsx_brackets = true, -- must add brackets to jsx attributes
				remove_template_string = false, -- remove backticks when there are no template string
			})
		end,
		dependencies = "nvim-treesitter/nvim-treesitter",
	},

	-- {
	-- 	"HiPhish/rainbow-delimiters.nvim",
	-- 	dependencies = { "nvim-treesitter/nvim-treesitter" },
	-- 	config = function()
	-- 		local rainbow_delimiters = require("rainbow-delimiters")
	--
	-- 		vim.g.rainbow_delimiters = {
	-- 			strategy = {
	-- 				[""] = rainbow_delimiters.strategy["global"],
	-- 				vim = rainbow_delimiters.strategy["local"],
	-- 			},
	-- 			query = {
	-- 				[""] = "rainbow-delimiters",
	-- 				lua = "rainbow-blocks",
	-- 			},
	-- 			highlight = {
	-- 				"RainbowDelimiterRed",
	-- 				"RainbowDelimiterYellow",
	-- 				"RainbowDelimiterBlue",
	-- 				"RainbowDelimiterOrange",
	-- 				"RainbowDelimiterGreen",
	-- 				"RainbowDelimiterViolet",
	-- 				"RainbowDelimiterCyan",
	-- 			},
	-- 		}
	-- 	end,
	-- },
	{
		"m-demare/hlargs.nvim",
		dependencies = { "nvim-treesitter/nvim-treesitter", "rebelot/kanagawa.nvim" },
		config = function()
			require("hlargs").setup({
				color = require("kanagawa.colors").setup({ theme = "wave" }).palette.surimiOrange,
			})
		end,
	},

	{
		"rareitems/hl_match_area.nvim",
		dependencies = "rebelot/kanagawa.nvim",
		opts = {},
		init = function()
			vim.api.nvim_set_hl(0, "MatchArea", { bg = "#292c3d" })
		end,
	},

	{
		-- Index, Fetch and Search devdocs.io
		"luckasRanarison/nvim-devdocs",
		dependencies = {
			"nvim-lua/plenary.nvim",
			"nvim-telescope/telescope.nvim",
			"nvim-treesitter/nvim-treesitter",
		},
		config = {},
		keys = {
			{ "<leader>sD", "<cmd>DevdocsOpen<CR>", desc = "Devdocs" },
		},
	},

	{
		-- Shows virtual text of the current context after functions, methods, statements
		"haringsrob/nvim_context_vt",
	},

	{
		"kndndrj/nvim-dbee",
		dependencies = {
			"MunifTanjim/nui.nvim",
		},
		build = function()
			-- Install tries to automatically detect the install method.
			-- if it fails, try calling it with one of these parameters:
			--    "curl", "wget", "bitsadmin", "go"
			require("dbee").install()
		end,
		config = function()
			require("dbee").setup({
				sources = {
					require("dbee.sources").EnvSource:new("DBEE_CONNECTIONS"),
					{
						id = "zsh-history",
						name = "Shell History",
						type = "sqlite",
						url = "~/.histdb/zsh-history.db",
					},
				},
			})
		end,
	},

	{
		-- see `:h vim-arsync-configuration` for usage
		"kenn7/vim-arsync",
		dependencies = {
			{
				"prabirshrestha/async.vim",
				{
					"folke/which-key.nvim",
					optional = true,
					opts = {
						defaults = {
							["<leader>ta"] = { name = "+async rsync" },
						},
					},
				},
			},
		},
		keys = {
			{
				"<leader>tas",
				":ARshowConf<CR>",
				desc = "Show Configuration",
				mode = "n",
			},
			{
				"<leader>tau",
				":ARsyncUp<CR>",
				desc = "upload local to remote",
				mode = "n",
			},
			{
				"<leader>tad",
				":ARsyncDown<CR>",
				desc = "download remote to local",
				mode = "n",
			},
		},
	},
}
