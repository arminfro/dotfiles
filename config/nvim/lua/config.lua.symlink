-- vi: ft=lua

vim.syntax = 'on'


vim.g.rehash256 = 1

vim.g.mapleader = ','

vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.expandtab = true

vim.opt.linebreak = true
vim.opt.whichwrap = "b,s,<,>,[,]"
vim.opt.wrap = true

-- Always draw the signcolumn.
vim.opt.signcolumn= "yes"

vim.opt.mouse = "a"

-- Folding
vim.opt.foldopen="block,hor,insert,jump,mark,percent,quickfix,search,tag,undo"
-- vim.opt.foldopen={"block","hor","insert","jump","mark","percent","quickfix","search","tag","undo"}

-- Tab completion for filenames like bash
-- https://stackoverflow.com/a/526940/6115544
vim.opt.wildmode="longest,list,full"
vim.opt.wildmenu=true

-- vim.opt.filetype="plugin,indent,on"

-- " One such option is the 'hidden' option, which allows you to re-use the same
-- " window and switch from an unsaved buffer without saving it first. Also allows
-- " you to keep an undo history for multiple files when re-using the same window
vim.opt.hidden=true

-- " Set 'nocompatible' to ward off unexpected things that your distro might
-- " have made, as well as sanely reset options when re-sourcing .vimrc
vim.nocompatible=true

-- " Show partial commands in the last line of the screen
vim.opt.showcmd=true

-- " Use case insensitive search, except when using capital letters
vim.opt.ignorecase=true
vim.opt.smartcase=true

-- " Instead of failing a command because of unsaved changes, instead raise a
-- " dialogue asking if you wish to save changed files.
vim.opt.confirm=true

-- " Use visual bell instead of beeping when doing something wrong
vim.opt.visualbell=true

-- " And reset the terminal code for the visual bell. If visualbell is set, and
-- " this line is also included, vim will neither flash nor beep. If visualbell
-- " is unset, this does nothing.
vim.t_vb = true

vim.opt.scrollback = 100000

-- " Set the command window height to 2 lines, to avoid many cases of having to press <Enter> to continue"
vim.opt.cmdheight = 2

-- " Display line numbers on the left
vim.opt.number = true
vim.opt.relativenumber = true

-- " Quickly time out on keycodes, but never time out on mappings
-- " set notimeout ttimeout ttimeoutlen=200

-- " Use <F12> to toggle between 'paste' and 'nopaste'
vim.opt.pastetoggle='<F12>'

-- vim.opt.wildignore+='/*/tmp/*,*.so,*.swp,*.zip'

-- if (has("termguicolors"))
vim.opt.termguicolors=true
-- endif

--Make line numbers default
vim.wo.number = true

--Enable mouse mode
vim.o.mouse = 'a'

--Enable break indent
vim.o.breakindent = true

--Save undo history
vim.opt.undofile = true

--Case insensitive searching UNLESS /C or capital in search
vim.o.ignorecase = true
vim.o.smartcase = true

--Decrease update time
vim.o.updatetime = 250
vim.wo.signcolumn = 'yes'

-- nvim-web-devicons: https://www.nerdfonts.com/cheat-sheet →     
require("nvim-web-devicons").setup {
  override = {
    zsh = { icon = "", color = "#428850", name = "Zsh" },
    lua = { icon = "", color = "#4E99DF", name = "Lua" },
    md = { icon = "", color = "#6BD02B", name = "Md" },
    [".gitignore"] = { icon = "", color = "#F14E32", name = "GitIgnore" },
  },
  default = true,
}

-- -- https://github.com/stevearc/dressing.nvim
require("dressing").setup {
  input = {
    -- Default prompt string
    default_prompt = "➤ ",

    -- When true, <Esc> will close the modal
    insert_only = true,

    -- These are passed to nvim_open_win
    anchor = "SW",
    relative = "cursor",
    row = 0,
    col = 0,
    border = "rounded",

    -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
    prefer_width = 40,
    max_width = nil,
    min_width = 20,

    -- see :help dressing_get_config
    get_config = nil,
  },
  select = {
    -- Priority list of preferred vim.select implementations
    backend = { "fzf", "builtin" },

    fzf = {
      window = {
        width = 0.5,
        height = 0.4,
      },
    },

    -- Options for built-in selector
    builtin = {
      -- These are passed to nvim_open_win
      anchor = "NW",
      relative = "cursor",
      row = 0,
      col = 0,
      border = "rounded",

      -- Window options
      winblend = 10,

      -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
      width = nil,
      max_width = 0.8,
      min_width = 40,
      height = nil,
      max_height = 0.9,
      min_height = 10,
    },

    -- see :help dressing_get_config
    get_config = nil,
  },
}

-- GitSigns
require("gitsigns").setup {
  keymaps = {
    -- Default keymap options
    noremap = true,
    ['n ]h'] = { expr = true, "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'"},
    ['n [h'] = { expr = true, "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'"},
    ['n <leader>hs'] = '<cmd>Gitsigns stage_hunk<CR>',
    ['v <leader>hs'] = ':Gitsigns stage_hunk<CR>',
    ['n <leader>hu'] = '<cmd>Gitsigns undo_stage_hunk<CR>',
    ['n <leader>hr'] = '<cmd>Gitsigns reset_hunk<CR>',
    ['v <leader>hr'] = ':Gitsigns reset_hunk<CR>',
    ['n <leader>hR'] = '<cmd>Gitsigns reset_buffer<CR>',
    ['n <leader>hp'] = '<cmd>Gitsigns preview_hunk<CR>',
    ['n <leader>hb'] = '<cmd>lua require"gitsigns".blame_line{full=true}<CR>',
    ['n <leader>hS'] = '<cmd>Gitsigns stage_buffer<CR>',
    ['n <leader>hU'] = '<cmd>Gitsigns reset_buffer_index<CR>',
    -- Text objects
    ['o ih'] = ':<C-U>Gitsigns select_hunk<CR>',
    ['x ih'] = ':<C-U>Gitsigns select_hunk<CR>'
  },
}

